<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Typoro PicGo MarkDown协同工作</title>
      <link href="/article/32c0b2ae/"/>
      <url>/article/32c0b2ae/</url>
      
        <content type="html"><![CDATA[<h1 id="Tyora简介"><a href="#Tyora简介" class="headerlink" title="Tyora简介"></a>Tyora简介</h1><ul><li><p>官网：<a href="https://typora.io/" target="_blank" rel="noopener">https://typora.io/</a></p></li><li><p>Typora 是一款简单、高效而且非常优雅的 Markdown 编辑器，它提供了一种所见即所得的全新的 Markdown 写作体验。</p><p>Typora 把源码编辑和效果预览两者合二为一，在输入 Markdown 代码的时候即时生成预览效果。</p><p>Typora 是目前互联网上最受欢迎的 Markdown 编辑器之一。</p></li><li><p>Tyora快捷键</p><ul><li>段落<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200213002205.png" alt></li><li>格式<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200213002455.png" alt></li></ul></li></ul><h1 id="Pandoc文档格式转化"><a href="#Pandoc文档格式转化" class="headerlink" title="Pandoc文档格式转化"></a>Pandoc文档格式转化</h1><ul><li><p>官网 <a href="https://pandoc.org/" target="_blank" rel="noopener">https://pandoc.org/</a></p></li><li><p>简介：</p></li><li><p><em>Pandoc*</em>是一个标记语言转换工具，可实现不同标记语言间的格式转换，堪称该领域中的“瑞士军刀”。<br>Typora 的文件导入/导出功能使用 Pandoc 把 Markdown 源码转换成不同的文件格式，所以我们如果想使用文件导入/导出功能，必须先安装 Pandoc。<br>如果不安装 Pandoc，Typora 只支持导出 HTML 和 PDF 格式的文件。<br>如果安装了 Pandoc ：<br>Typora 支持的导入文件格式: .docx, .latex, .tex, .ltx, .rst, .rest, .org, .wiki, .dokuwiki, .textile, .opml, .epub.<br>Typora 支持的导出文件格式 : HTML, PDF, Docx, odt, rtf, Epub, LaTeX, Media Wiki,Image.</p></li><li><p>安装方式：<br>STEP 1. 打开下载页面：<a href="https://github.com/jgm/pandoc/releases/latest" target="_blank" rel="noopener">https://github.com/jgm/pandoc/releases/latest</a><br>STEP 2. 下载最新的安装包：pandoc-版本号.msi<br>STEP 3. 双击后按照提示一步步安装</p></li></ul><h1 id="PicGo图床"><a href="#PicGo图床" class="headerlink" title="PicGo图床"></a>PicGo图床</h1><ul><li><p>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a></p></li><li><p>简介：<br>PicGo: 一个用于快速上传图片并获取图片URL链接的工具<br>PicGo 本体支持如下图床：</p><ul><li>微博图床 v1.0 微博图床从 2019 年 4 月开始进行防盗链，不建议继续使用</li><li>七牛图床 v1.0</li><li>腾讯云 COS v4\v5版本 v1.1 &amp; v1.5.0</li><li>又拍云 v1.2.0</li><li>GitHub v1.5.0</li><li>SM.MS v1.5.1 由于官方不再支持V1版本，暂时请使用smms-user插件</li><li>阿里云 OSS v1.6.0</li><li>Imgur v1.6.0</li></ul></li><li><p>特色功能</p><ul><li>支持拖拽图片上传</li><li>支持快捷键上传剪贴板里第一张图片</li><li>Windows和macOS支持右键图片文件通过菜单上传 (v2.1.0+)</li><li>上传图片后自动复制链接到剪贴板</li><li>支持自定义复制到剪贴板的链接格式</li><li>支持修改快捷键，默认快速上传快捷键：<code>command+shift+p</code>（macOS）| <code>control+shift+p</code>（Windows\Linux)</li><li>支持插件系统，已有插件支持Gitee、青云等第三方图床<ul><li>更多第三方插件以及使用了 PicGo 底层的应用可以在 <a href="https://github.com/PicGo/Awesome-PicGo" target="_blank" rel="noopener">Awesome-PicGo</a> 找到。欢迎贡献！</li></ul></li><li>支持通过发送HTTP请求调用 PicGo 上传（v2.2.0+)</li></ul></li></ul><h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><blockquote><p><a href="https://www.jianshu.com/p/45ff441ac0d6" target="_blank" rel="noopener">Typora：简单高效的 Markdown 编辑器</a><br><a href="https://www.jianshu.com/p/a0bf28d7f2fd" target="_blank" rel="noopener">Typora + PicGo MarkDown完美组合</a><br><a href="https://www.jianshu.com/p/44c8aaa9cda1" target="_blank" rel="noopener">Typora - 不要太棒的Markdown编辑器</a><br><a href="https://www.cnblogs.com/lc1203/p/ac5d44992d9c5f84bf3383d15aff40c2.html" target="_blank" rel="noopener">高效且优雅的笔记记录：为知笔记+Typora+图床</a><br><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">Picgo github readme</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 高效 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo cmd</title>
      <link href="/article/339e02f9/"/>
      <url>/article/339e02f9/</url>
      
        <content type="html"><![CDATA[<h1 id="新建网站"><a href="#新建网站" class="headerlink" title="新建网站"></a>新建网站</h1><pre><code>hexo init [folder]</code></pre><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><h1 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h1><pre><code>hexo new [layout] &lt;title&gt;</code></pre><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><pre><code>hexo new &quot;post title with whitespace&quot;</code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><pre><code>hexo new page --path about/me &quot;About me&quot;</code></pre><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><pre><code>hexo new page --path about/me</code></pre><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h1 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h1><pre><code>hexo g</code></pre><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><h1 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h1><pre><code>hexo s</code></pre><p>默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><pre><code>hexo d</code></pre><h1 id="清除生成的静态页面"><a href="#清除生成的静态页面" class="headerlink" title="清除生成的静态页面"></a>清除生成的静态页面</h1><pre><code>hexo clean</code></pre><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><p>引用地址：</p><p>从hexo.io说明文档拷贝</p><blockquote><p><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/commands.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/article/d4a1185/"/>
      <url>/article/d4a1185/</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>这是一个测试。<br><img src="https://s2.ax1x.com/2020/02/10/15r7oF.png" alt="15r7oF.png"></p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world !\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
