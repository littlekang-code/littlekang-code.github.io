<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>行走的康康</title>
  
  <subtitle>KangKang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.littlekang.xyz/"/>
  <updated>2020-05-23T07:33:55.080Z</updated>
  <id>http://blog.littlekang.xyz/</id>
  
  <author>
    <name>Kang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习笔记:设备树(dts)常用of操作函数</title>
    <link href="http://blog.littlekang.xyz/article/a46b71e2/"/>
    <id>http://blog.littlekang.xyz/article/a46b71e2/</id>
    <published>2020-05-23T07:25:24.000Z</published>
    <updated>2020-05-23T07:33:55.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>内核中开放出来的接口函数的声明大多在include/linux/下面，关于设备树的操作都是以of_xxx.h形式：<br><img src="https://kkkk-pic-markdown.oss-cn-shenzhen.aliyuncs.com/img/20200523130011.png" style="zoom:150%;"></p><p>说明：</p><pre class="line-numbers language-txt"><code class="language-txt">of_fdt.h           // dtb文件的相关操作函数, 我们一般用不到, 因为dtb文件在内核中已经被转换为device_node树(它更易于使用)//处理device_nodeof.h               // 提供设备树的一般处理函数, 比如 of_property_read_u32(读取某个属性的u32值), of_get_child_count(获取某个device_node的子节点数)of_address.h       // 地址相关的函数, 比如 of_get_address(获得reg属性中的addr, size值),of_match_device(从matches数组中取出与当前设备最匹配的一项)of_dma.h           // 设备树中DMA相关属性的函数of_gpio.h          // GPIO相关的函数of_graph.h         // GPU相关驱动中用到的函数, 从设备树中获得GPU信息of_iommu.h         // 很少用到of_irq.h           // 中断相关的函数of_mdio.h          // MDIO (Ethernet PHY) APIof_net.h           // OF helpers for network devices. of_pci.h           // PCI相关函数of_pdt.h           // 很少用到of_reserved_mem.h  // reserved_mem的相关函数//处理 platform_deviceof_platform.h      // 把device_node转换为platform_device时用到的函数,                    // 比如of_device_alloc(根据device_node分配设置platform_device),                    //     of_find_device_by_node (根据device_node查找到platform_device),                   //     of_platform_bus_probe (处理device_node及它的子节点)of_device.h        // 设备相关的函数, 比如 of_match_device<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Device Tree的解析大致流程：<img src="https://kkkk-pic-markdown.oss-cn-shenzhen.aliyuncs.com/img/20200523141205.png" style="zoom:200%;"></li></ul><h1 id="相关结构体说明"><a href="#相关结构体说明" class="headerlink" title="相关结构体说明"></a>相关结构体说明</h1><ul><li><p><strong>struct device_node</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> device_node <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/* name属性的值, 没有为&lt;NULL> */</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>type<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/* device_type属性的值，没有为&lt;NULL> */</span>  phandle phandle<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">/* 可用于其他节点引用的标记 */</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>full_name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/* 节点名称 */</span>  <span class="token keyword">struct</span> fwnode_handle fwnode<span class="token punctuation">;</span>  <span class="token keyword">struct</span>    property <span class="token operator">*</span>properties<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*指向该设备节点下的第一个属性，其他属性与该属性链表相接*/</span>  <span class="token keyword">struct</span>    property <span class="token operator">*</span>deadprops<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* removed properties */</span>  <span class="token keyword">struct</span>    device_node <span class="token operator">*</span>parent<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 设备的父节点 */</span>  <span class="token keyword">struct</span>    device_node <span class="token operator">*</span>child<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 设备子节点 */</span>  <span class="token keyword">struct</span>    device_node <span class="token operator">*</span>sibling<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 设备兄弟节点 */</span>  <span class="token keyword">struct</span>    kobject kobj<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> _flags<span class="token punctuation">;</span>  <span class="token keyword">void</span>    <span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>struct property</strong></p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> property <span class="token punctuation">{</span>  <span class="token keyword">char</span>    <span class="token operator">*</span>name<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/* property full name */</span>  <span class="token keyword">int</span>    length<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/* property value length */</span>  <span class="token keyword">void</span>    <span class="token operator">*</span>value<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">/* property value */</span>  <span class="token keyword">struct</span> property <span class="token operator">*</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* next property under the same node */</span>  <span class="token keyword">unsigned</span> <span class="token keyword">long</span> _flags<span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> unique_id<span class="token punctuation">;</span>  <span class="token keyword">struct</span> bin_attribute attr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="常用API函数说明"><a href="#常用API函数说明" class="headerlink" title="常用API函数说明"></a>常用API函数说明</h1><h2 id="查找节点的OF函数"><a href="#查找节点的OF函数" class="headerlink" title="查找节点的OF函数"></a>查找节点的OF函数</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//of.h</span><span class="token comment" spellcheck="true">//下面是在form节点下面,通过name,type或者compatible属性获取具有相同名字或类型的节点</span><span class="token comment" spellcheck="true">/**   from：开始查找的节点，如果为 NULL 表示从根节点开始查找整个设备树。 *   name：要查找的节点名字。 *   返回值：找到的节点，如果为 NULL 表示查找失败。*/</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span><span class="token function">of_find_node_by_name</span><span class="token punctuation">(</span><span class="token keyword">struct</span> device_node <span class="token operator">*</span>from<span class="token punctuation">,</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    *  from：开始查找的节点，如果为 NULL 表示从根节点开始查找整个设备树。 *  type：要查找的节点对应的 type 字符串，也就是 device_type 属性值。 *  返回值：找到的节点，如果为 NULL 表示查找失败。     */</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span><span class="token function">of_find_node_by_type</span><span class="token punctuation">(</span><span class="token keyword">struct</span> device_node <span class="token operator">*</span>from<span class="token punctuation">,</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**    from：开始查找的节点，如果为 NULL 表示从根节点开始查找整个设备树。 *    type：要查找的节点对应的 type 字符串，也就是 device_type 属性值，可以为 NULL，表示*    忽略掉 device_type 属性。 *    compatible：要查找的节点所对应的 compatible 属性列表。 *    返回值：找到的节点，如果为 NULL 表示查找失败 */</span>  <span class="token keyword">extern</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span><span class="token function">of_find_compatible_node</span><span class="token punctuation">(</span><span class="token keyword">struct</span> device_node <span class="token operator">*</span>from<span class="token punctuation">,</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>type<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>compat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*     path：带有全路径的节点名，可以使用节点的别名，比如“/backlight”就是 backlight 这个节点的全路径。 *    返回值：找到的节点，如果为 NULL 表示查找失败 */</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span><span class="token function">of_find_node_by_path</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查找父-子节点的OF函数"><a href="#查找父-子节点的OF函数" class="headerlink" title="查找父/子节点的OF函数"></a>查找父/子节点的OF函数</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//of.h</span><span class="token comment" spellcheck="true">/**    用于获取指定节点的父节点(如果有父节点的话)*   node：要查找的父节点的节点。   *    返回值：找到的父节点。*/</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span><span class="token function">of_get_parent</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**    用于迭代的查找子节点*    node：父节点。 *    prev：前一个子节点，也就是从哪一个子节点开始迭代的查找下一个子节点。*    可以设置为NULL，表示从第一个子节点开始。 *    返回值：找到的下一个子节点。 */</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span><span class="token function">of_get_next_child</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span>node<span class="token punctuation">,</span>                         <span class="token keyword">struct</span> device_node <span class="token operator">*</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="提取属性值的OF函数"><a href="#提取属性值的OF函数" class="headerlink" title="提取属性值的OF函数"></a>提取属性值的OF函数</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//of.h</span><span class="token comment" spellcheck="true">/**    用于提取指定属性的值，常用于判断属性是否存在*    np：设备节点。 *    name：  属性名字。 *    lenp：属性值的字节数 *    返回值：找到的属性。 */</span><span class="token keyword">extern</span> <span class="token keyword">struct</span> property <span class="token operator">*</span><span class="token function">of_find_property</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span>np<span class="token punctuation">,</span>                     <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span>                     <span class="token keyword">int</span> <span class="token operator">*</span>lenp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**    用于获取属性中元素的数量,比如 reg 属性值是一个*    数组，那么使用此函数可以获取到这个数组的大小*    np：设备节点。 *    proname：  需要统计元素数量的属性名字。 *    elem_size：元素长度。 *    返回值：得到的属性元素数量。 */</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">of_property_count_elems_of_size</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span>np<span class="token punctuation">,</span>                <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>propname<span class="token punctuation">,</span> <span class="token keyword">int</span> elem_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当然这里也可以通过一个设备节点,获取里面某个属性的值</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">of_property_read_u8</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span>np<span class="token punctuation">,</span>                       <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>propname<span class="token punctuation">,</span>                       u8 <span class="token operator">*</span>out_value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">of_property_read_u8_array</span><span class="token punctuation">(</span>np<span class="token punctuation">,</span> propname<span class="token punctuation">,</span> out_value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">of_property_read_u16</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span>np<span class="token punctuation">,</span>                       <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>propname<span class="token punctuation">,</span>                       u16 <span class="token operator">*</span>out_value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">of_property_read_u16_array</span><span class="token punctuation">(</span>np<span class="token punctuation">,</span> propname<span class="token punctuation">,</span> out_value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">of_property_read_u32</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span>np<span class="token punctuation">,</span>                       <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>propname<span class="token punctuation">,</span>                       u32 <span class="token operator">*</span>out_value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">of_property_read_u32_array</span><span class="token punctuation">(</span>np<span class="token punctuation">,</span> propname<span class="token punctuation">,</span> out_value<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">of_property_read_s32</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span>np<span class="token punctuation">,</span>                       <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>propname<span class="token punctuation">,</span>                       s32 <span class="token operator">*</span>out_value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">of_property_read_u32</span><span class="token punctuation">(</span>np<span class="token punctuation">,</span> propname<span class="token punctuation">,</span> <span class="token punctuation">(</span>u32<span class="token operator">*</span><span class="token punctuation">)</span> out_value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取某个节点字符串数量</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">of_property_count_strings</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span>np<span class="token punctuation">,</span>                        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>propname<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">of_property_read_string_helper</span><span class="token punctuation">(</span>np<span class="token punctuation">,</span> propname<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取某个界定里的字符串数字</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">of_property_read_string_array</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span>np<span class="token punctuation">,</span>                        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>propname<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>out_strs<span class="token punctuation">,</span>                        size_t sz<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">of_property_read_string_helper</span><span class="token punctuation">(</span>np<span class="token punctuation">,</span> propname<span class="token punctuation">,</span> out_strs<span class="token punctuation">,</span> sz<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//同时也可以获取到字符串数组的某个指定的字符串</span><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">of_property_read_string_index</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span>np<span class="token punctuation">,</span>                        <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>propname<span class="token punctuation">,</span>                        <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>output<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token function">of_property_read_string_helper</span><span class="token punctuation">(</span>np<span class="token punctuation">,</span> propname<span class="token punctuation">,</span> output<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> rc <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> rc <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**    用于获取#address-cells 属性值*      np：设备节点。 *    返回值：获取到的#address-cells 属性值。*/</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">of_n_addr_cells</span><span class="token punctuation">(</span><span class="token keyword">struct</span> device_node <span class="token operator">*</span>np<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**    用于获取#size-cells 属性值*      np：设备节点。 *    返回值：获取到的#size-cells 属性值。*/</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">of_n_size_cells</span><span class="token punctuation">(</span><span class="token keyword">struct</span> device_node <span class="token operator">*</span>np<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>of_property使用实例：<img src="https://kkkk-pic-markdown.oss-cn-shenzhen.aliyuncs.com/img/20200523150851.png" style="zoom:150%;"></li></ul><h2 id="其他常用的OF函数"><a href="#其他常用的OF函数" class="headerlink" title="其他常用的OF函数"></a>其他常用的OF函数</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">/**    用于查看节点的 compatible 属性是否有包含 compat 指定的字*    符串，也就是检查设备节点的兼容性*    device：设备节点。 *    compat：要查看的字符串。 *    返回值：0，节点的 compatible 属性中不包含 compat 指定的字符串；正数，节点的 compatible*    属性中包含 compat 指定的字符串。*/</span><span class="token keyword">extern</span> <span class="token keyword">int</span> <span class="token function">of_device_is_compatible</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">struct</span> device_node <span class="token operator">*</span>device<span class="token punctuation">,</span>                   <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * of_get_address - 提取I/O口地址 * @np - 设备节点指针 * @index - 地址的标号 * @size - 输出参数，I/O口地址的长度 * @flags - 输出参数，类型（IORESOURCE_IO、IORESOURCE_MEM） * 成功：I/O口地址的首地址；失败：NULL */</span>__be32 <span class="token operator">*</span><span class="token function">of_get_address</span><span class="token punctuation">(</span><span class="token keyword">struct</span> device_node <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> u64 <span class="token operator">*</span>size<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>flags<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">/** * of_translate_address - 从设备树中提取I/O口地址转换成物理地址 * @np - 设备节点指针 * @in_addr - 设备树提取的I/O地址 * 成功：物理地址；失败：OF_BAD_ADDR */</span>u64 <span class="token function">of_translate_address</span><span class="token punctuation">(</span><span class="token keyword">struct</span> device_node <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">const</span> __be32 <span class="token operator">*</span>in_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * of_iomap - 提取I/O口地址并映射成虚拟地址 * @np - 设备节点指针 * @index - I/O地址的标号 * 成功：映射好虚拟地址；失败：NULL */</span><span class="token keyword">void</span> __iomem <span class="token operator">*</span><span class="token function">of_iomap</span><span class="token punctuation">(</span><span class="token keyword">struct</span> device_node <span class="token operator">*</span>np<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**  * of_address_to_resource - 从设备树中提取资源resource（I/O地址） * @np - 设备节点指针 * @index - I/O地址资源的标号 * @r - 输出参数，指向资源resource（I/O地址）  * 成功：0；失败：负数，绝对值是错误码 */</span><span class="token keyword">int</span> <span class="token function">of_address_to_resource</span><span class="token punctuation">(</span><span class="token keyword">struct</span> device_node <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">struct</span> resource <span class="token operator">*</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * include/of_gpio.h * of_get_named_gpio - 从设备树中提取gpio口 * @np - 设备节点指针 * @propname - 属性名 * @index - gpio口引脚标号  * 成功：得到GPIO口编号；失败：负数，绝对值是错误码 */</span><span class="token keyword">int</span> <span class="token function">of_get_named_gpio</span><span class="token punctuation">(</span><span class="token keyword">struct</span> device_node <span class="token operator">*</span>np<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>propname<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * of_irq_count从设备树中提取中断的数量 * @np - 设备节点指针 * 成功：大于等于0，实际中断数量，0则表示没有中断 */</span><span class="token keyword">int</span> <span class="token function">of_irq_count</span><span class="token punctuation">(</span><span class="token keyword">struct</span> device_node <span class="token operator">*</span>dev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * of_irq_get - 从设备树中提取中断号 * @np - 设备节点指针 * @index - 要提取的中断号的标号 * 成功：中断号；失败：负数，其绝对值是错误码 */</span><span class="token keyword">int</span> <span class="token function">of_irq_get</span><span class="token punctuation">(</span><span class="token keyword">struct</span> device_node <span class="token operator">*</span>dev<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><blockquote><p><a href="https://blog.csdn.net/qq_16777851/article/details/87891150" target="_blank" rel="noopener">设备树学习（十一、内核中设备树的操作函数）</a><br><a href="https://blog.csdn.net/fengyuwuzu0519/article/details/74352188" target="_blank" rel="noopener">设备树语法及常用API函数</a><br><a href="http://sourcelink.top/2019/09/10/dts-unflatten_device_tree/" target="_blank" rel="noopener">dtb信息转化为device_node结构/</a><br>【正点原子】I.MX6U嵌入式Linux驱动开发指南V1.4<br><a href="https://www.cnblogs.com/xiaojiang1025/p/6368260.html" target="_blank" rel="noopener">Linux内核 设备树操作常用API</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;内核中开放出来的接口函数的声明大多在include/linux/下面，关于设备树的操作都是以of_xxx.h形式：&lt;br&gt;&lt;img
        
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.littlekang.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://blog.littlekang.xyz/tags/linux/"/>
    
      <category term="driver" scheme="http://blog.littlekang.xyz/tags/driver/"/>
    
  </entry>
  
  <entry>
    <title>SQLite学习笔记</title>
    <link href="http://blog.littlekang.xyz/article/fefc90b9/"/>
    <id>http://blog.littlekang.xyz/article/fefc90b9/</id>
    <published>2020-04-10T01:56:52.000Z</published>
    <updated>2020-04-10T03:49:04.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库基础概念"><a href="#数据库基础概念" class="headerlink" title="数据库基础概念"></a>数据库基础概念</h1><h2 id="数据库的模型"><a href="#数据库的模型" class="headerlink" title="数据库的模型"></a>数据库的模型</h2><ul><li>层次模型</li><li>网状模型</li><li>关系模型</li><li>面向对象模型</li><li>半结构化模型</li></ul><p>由于关系模型在很长一段时间内成为主流的数据模型，所以我们也习惯性将数据库类型分为两类，<strong>关系型数据库和非关系型数据库</strong>。</p><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p>这是我们目前至今主流的数据库类型，其对应的数据存储模型就是关系型模型，数据以表格形式存储，字段关联数据。</p><p><strong>二维表结构是非常贴近逻辑世界的一个概念，它更容易理解，这是关系型数据库能够成为主流的其中一个重要原因。</strong>通过 SQL 进行表与表之间的联接查询非常的方便自然。</p><p>缺点也是很显而易见的，海量数据下，对一张表的查询会显得很力不从心，就是因为数据的存储不具备特殊的数据结构，例如有些非关系型数据库的数据存储结构是类似树的结构，就使得查询上具有天然的优势。</p><p>所以个人认为，虽然现在是关系型数据库的天下，但相信以后会出现一些优秀的非关系型数据库取代传统的关系型数据库。因为以后必然是大数据的时代，那么海量数据下，传统的关系型数据的效率问题就会被逐渐放大。</p><h2 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h2><p><strong>索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。</strong></p><p>索引分为：聚集索引、非聚集索引、唯一索引等。<br>一张表可以有多个唯一索引和非聚集索引，但最多只能有一个聚集索引。 - 索引可以包含多列。<br>合理的创建索引能够提升查询语句的执行效率，但降低了新增、删除操作的速度，同时也会消耗一定的数据库物理空间。</p><h2 id="如何描述多对多的关系"><a href="#如何描述多对多的关系" class="headerlink" title="如何描述多对多的关系"></a>如何描述多对多的关系</h2><p><strong>系型数据库中描述多对多的关系,需要建立第三张数据表。</strong><br>比如学生选课,需要在学生信息表和课程信息表的基础上,再建立选课信息表,该表中存放学生Id和课程Id。</p><h2 id="内联接、左外联接、右外联接"><a href="#内联接、左外联接、右外联接" class="headerlink" title="内联接、左外联接、右外联接"></a>内联接、左外联接、右外联接</h2><ul><li><strong>(Inner Join）</strong>：匹配2张表中相关联的记录。</li><li><strong>(Left Outer Join）</strong>：除了匹配2张表中相关联的记录外，还会匹配左表中剩余的记录，右表中未匹配到的字段用NULL表示。</li><li><strong>(Right Outer Join）</strong>：除了匹配2张表中相关联的记录外，还会匹配右表中剩余的记录，左表中未匹配到的字段用NULL表示。在判定左表和右表时，要根据表名出现在Outer Join的左右位置关系。</li></ul><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401230828.png" style="zoom: 90%;"><ul><li><p><strong>约定</strong></p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401230852.png" style="zoom: 150%;"></li><li><p><strong>INNER JOIN 内联查询</strong></p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401230916.png" style="zoom:150%;">示例：<img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401230934.png" style="zoom: 150%;"></li><li><p><strong>LIFT JOIN 左连接查询</strong></p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401230957.png" style="zoom:150%;">示例：<img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401231014.png" style="zoom:200%;"></li><li><p><strong>RIGHT JOIN 右连接查询</strong></p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401231041.png" style="zoom: 150%;">示例：(sqlite 不支持right join & full join)<img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401231105.png" style="zoom:200%;"></li><li><p><em><em>CROSS JOIN </em></em></p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401231129.png" style="zoom:150%;">示例：<img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401231153.png" style="zoom:200%;"></li></ul><blockquote><p><a href="https://zhuanlan.zhihu.com/p/29234064" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/29234064</a></p></blockquote><h2 id="sql语句中join-on和where"><a href="#sql语句中join-on和where" class="headerlink" title="sql语句中join on和where"></a>sql语句中join on和where</h2><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401231215.png" alt><br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401231243.png" alt></p><blockquote><p><a href="https://my.oschina.net/jun24bryant/blog/787375" target="_blank" rel="noopener">https://my.oschina.net/jun24bryant/blog/787375</a></p></blockquote><h1 id="SQLite简介"><a href="#SQLite简介" class="headerlink" title="SQLite简介"></a>SQLite简介</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323094302.png" alt></p><h1 id="为什么要用SQLite"><a href="#为什么要用SQLite" class="headerlink" title="为什么要用SQLite"></a>为什么要用SQLite</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323094401.png" alt></p><h1 id="SQLite架构"><a href="#SQLite架构" class="headerlink" title="SQLite架构"></a>SQLite架构</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200409000554.png" alt></p><h1 id="SQLite安装"><a href="#SQLite安装" class="headerlink" title="SQLite安装"></a>SQLite安装</h1><p>目前，几乎所有版本的 Linux 操作系统都附带 SQLite。所以，只要使用下面的命令来检查您的机器上是否已经安装了 SQLite。</p><pre class="line-numbers language-shell"><code class="language-shell">sqlite3SQLite version 3.7.15.2  2013-01-09  11:53:05  Enter  ".help"  for instructions Enter SQL statements terminated with a ";"sqlite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果没有看到上面的结果，那么就意味着没有在 Linux 机器上安装 SQLite。</p><h2 id="SQLite下载地址"><a href="#SQLite下载地址" class="headerlink" title="SQLite下载地址"></a>SQLite下载地址</h2><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323094705.png" alt></p><blockquote><p><a href="http://www.sqlite.org/download.html" target="_blank" rel="noopener">http://www.sqlite.org/download.html</a></p></blockquote><h2 id="Linux下通过源码安装"><a href="#Linux下通过源码安装" class="headerlink" title="Linux下通过源码安装"></a>Linux下通过源码安装</h2><pre class="line-numbers language-shell"><code class="language-shell">tar xvzf sqlite-autoconf-3310100.tar.gzcd sqlite-autoconf-3310100./configure --prefix=/usr/localmakemake install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a>Windows下安装</h2><p>下载：<br><a href="https://www.sqlite.org/2020/sqlite-dll-win64-x64-3310100.zip" target="_blank" rel="noopener">sqlite-dll-win64-x64-3310100.zip</a><br><a href="https://www.sqlite.org/2020/sqlite-tools-win32-x86-3310100.zip" target="_blank" rel="noopener">sqlite-tools-win32-x86-3310100.zip</a></p><p>解压至同一目录下，并添加至环境变量<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323095137.png" style="zoom:200%;"></p><h1 id="DB-Browser-for-SQLite"><a href="#DB-Browser-for-SQLite" class="headerlink" title="DB Browser for SQLite"></a>DB Browser for SQLite</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323095823.png" style="zoom:150%;"><p>（1）项目地址：<a href="http://sqlitebrowser.org/" target="_blank" rel="noopener">http://sqlitebrowser.org/</a><br>（2）DB Browser for SQLite 是一个高品质，可视化，开放源码的工具。用于创建，设计和编辑 SQLite 兼容的数据库文件。<br>（3）它适用于希望创建数据库，检索和编辑数据的用户和开发人员。它采用了熟悉的电子表格一样的界面，你不需要学习复杂的 SQL 命令。<br>（4）支持各种操作系统：Windows、MacOS、Linux</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>（1）创建数据库文件<br>（2）创建、定义、修改和删除表<br>（3）创建、定义和删除索引<br>（4）浏览、编辑、添加和删除记录<br>（5）搜索记录<br>（6）导入和导出为文本记录<br>（7）将表导出成 CSV 文件，或从 CSV 文件导入表<br>（8）将表导出成数据库存储文件，或从数据库存储文件导入表<br>（9）SQL 查询以及错误检查<br>（10）检查 SQL 命令的错误日志</p><blockquote><p><a href="https://www.hangge.com/blog/cache/detail_1375.html" target="_blank" rel="noopener">https://www.hangge.com/blog/cache/detail_1375.html</a></p></blockquote><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><blockquote><p><a href="https://sqlitebrowser.org/dl/" target="_blank" rel="noopener">https://sqlitebrowser.org/dl/</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323114320.png" alt></p><h1 id="SQLite命令"><a href="#SQLite命令" class="headerlink" title="SQLite命令"></a>SQLite命令</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200407235117.png" alt></p><h1 id="SQLite常用命令"><a href="#SQLite常用命令" class="headerlink" title="SQLite常用命令"></a>SQLite常用命令</h1><pre><code>#查看命令清单.help#退出.quit.exit#开启/关闭头部信息.header ON | OFF#显示各种设置的当前值.show#设置输出模式.mode MODE#MODE可以是:   csv 逗号分隔符   column 左对齐的列   html，html的&lt;table&gt;代码   intert，TABLE表的SQL插入语句   line, 每行一个   list, 由 .separator 字符串分隔的值   table, 由 Tab 分隔的值   tcl, TCL列</code></pre><h1 id="SQLite语法"><a href="#SQLite语法" class="headerlink" title="SQLite语法"></a>SQLite语法</h1><h2 id="大小写敏感性"><a href="#大小写敏感性" class="headerlink" title="大小写敏感性"></a>大小写敏感性</h2><p>有个重要的点值得注意，SQLite 是<strong>不区分大小写</strong>的，但也有一些命令是大小写敏感的，比如 <strong>GLOB</strong> 和 <strong>glob</strong> 在 SQLite 的语句中有不同的含义。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>SQLite 注释是附加的注释，可以在 SQLite 代码中添加注释以增加其可读性，他们可以出现在任何空白处，包括在表达式内和其他 SQL 语句的中间，但它们不能嵌套。</p><p>SQL 注释以两个连续的 “-“ 字符（ASCII 0x2d）开始，并扩展至下一个换行符（ASCII 0x0a）或直到输入结束，以先到者为准</p><p>您也可以使用 C 风格的注释，以 “/<em>“ 开始，并扩展至下一个 “</em>/“ 字符对或直到输入结束，以先到者为准。SQLite的注释可以跨越多行。</p><p><code>sqlite&gt;.help --  这是一个简单的注释</code></p><h1 id="SQLite-存储类"><a href="#SQLite-存储类" class="headerlink" title="SQLite 存储类"></a>SQLite 存储类</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323163449.png" alt></p><h1 id="SQLite常用命令行操作"><a href="#SQLite常用命令行操作" class="headerlink" title="SQLite常用命令行操作"></a>SQLite常用命令行操作</h1><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><pre class="line-numbers language-shell"><code class="language-shell">#创建sqlite3 test.db#查看sqlite> .databases#导出数据库内容到文本文件sqlite3 test.db .dump >testdb.sql#从文本文件恢复sqlite3 testdb.db < testdb.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="附加数据库"><a href="#附加数据库" class="headerlink" title="附加数据库"></a>附加数据库</h2><p>假设这样一种情况，当在同一时间有多个数据库可用，您想使用其中的任何一个。SQLite 的 <strong>ATTACH DATABASE</strong> 语句是用来选择一个特定的数据库，使用该命令后，所有的 SQLite 语句将在附加的数据库下执行。</p><pre class="line-numbers language-shell"><code class="language-shell">ATTACH DATABASE 'test.db' AS 'test'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323170638.png" style="zoom:200%;"><h2 id="分离数据库"><a href="#分离数据库" class="headerlink" title="分离数据库"></a>分离数据库</h2><p>SQLite的 <strong>DETACH DTABASE</strong> 语句是用来把命名数据库从一个数据库连接分离和游离出来，连接是之前使用 ATTACH 语句附加的。如果同一个数据库文件已经被附加上多个别名，DETACH 命令将只断开给定名称的连接，而其余的仍然有效。您无法分离 <strong>main</strong> 或 <strong>temp</strong> 数据库。</p><blockquote><p>如果数据库是在内存中或者是临时数据库，则该数据库将被摧毁，且内容将会丢失。</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">DETACH DATABASE 'testtest'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323171123.png" style="zoom:200%;"><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>SQLite 的 <strong>CREATE TABLE</strong> 语句用于在任何给定的数据库创建一个新表。创建基本表，涉及到命名表、定义列及每一列的数据类型。</p><pre class="line-numbers language-shell"><code class="language-shell">sqlite> CREATE TABLE COMPANY(   ID INT PRIMARY KEY     NOT NULL,   NAME           TEXT    NOT NULL,   AGE            INT     NOT NULL,   ADDRESS        CHAR(50),   SALARY         REAL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><p>SQLite 的 <strong>DROP TABLE</strong> 语句用来删除表定义及其所有相关数据、索引、触发器、约束和该表的权限规范。</p><blockquote><p>使用此命令时要特别注意，因为一旦一个表被删除，表中所有信息也将永远丢失。</p></blockquote><pre class="line-numbers language-shell"><code class="language-shell">#确认表已经存在sqlite>.tables#删除company表sqlite>DROP TABLE COMPANY<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="insert语句"><a href="#insert语句" class="headerlink" title="insert语句"></a>insert语句</h2><p>SQLite 的 <strong>INSERT INTO</strong> 语句用于向数据库的某个表中添加新的数据行。<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323180657.png" style="zoom: 200%;"></p><pre class="line-numbers language-shell"><code class="language-shell">#向company表中添加内容INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)VALUES (1, 'Paul', 32, 'California', 20000.00 );INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)VALUES (2, 'Allen', 25, 'Texas', 15000.00 );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="select语句"><a href="#select语句" class="headerlink" title="select语句"></a>select语句</h2><p>SQLite 的 <strong>SELECT</strong> 语句用于从 SQLite 数据库表中获取数据，以结果表的形式返回数据。这些结果表也被称为结果集。<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323180918.png" style="zoom:200%;"></p><pre class="line-numbers language-shell"><code class="language-shell">#获取company id 和 name字段sqlite> SELECT id, name FROM COMPANY;#获取company表中所有字段sqlite> SELECT * FROM COMPANY;#设置输出列的宽度sqlite> .width 10,20,20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SQLite运算符"><a href="#SQLite运算符" class="headerlink" title="SQLite运算符"></a>SQLite运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323191038.png" style="zoom:150%;"><pre class="line-numbers language-shell"><code class="language-shell">sqlite> select 10 + 20;10 + 20----------30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323191238.png" style="zoom:150%;"><pre class="line-numbers language-shell"><code class="language-shell">sqlite> SELECT * FROM COMPANY WHERE SALARY >= 10000;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323192410.png" alt></p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323192558.png" style="zoom:150%;"><pre class="line-numbers language-shell"><code class="language-shell">sqlite> SELECT * FROM COMPANY WHERE AGE BETWEEN 25 AND 27;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323192814.png" alt></p><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200323192958.png" style="zoom:150%;"><h1 id="SQLite子句"><a href="#SQLite子句" class="headerlink" title="SQLite子句"></a>SQLite子句</h1><h2 id="SQLite-Where子句"><a href="#SQLite-Where子句" class="headerlink" title="SQLite Where子句"></a>SQLite Where子句</h2><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200324105704.png" alt></p><h2 id="SQLite-Update子句"><a href="#SQLite-Update子句" class="headerlink" title="SQLite Update子句"></a>SQLite Update子句</h2><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200324105838.png" alt><br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200324110300.png" style="zoom:150%;"></p><h2 id="SQLite-Like子句"><a href="#SQLite-Like子句" class="headerlink" title="SQLite Like子句"></a>SQLite Like子句</h2><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401231408.png" alt><br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401231423.png" alt><br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401231439.png" alt></p><p>不区分大小写:<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401231459.png" style="zoom:150%;"></p><h2 id="SQLite-Glob子句"><a href="#SQLite-Glob子句" class="headerlink" title="SQLite Glob子句"></a>SQLite Glob子句</h2><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401231521.png" alt><br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401231539.png" alt><br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401231553.png" alt></p><p>区分大小写：<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200401231614.png" style="zoom:200%;"></p><h2 id="SQLite-Limit子句"><a href="#SQLite-Limit子句" class="headerlink" title="SQLite Limit子句"></a>SQLite Limit子句</h2><p>SQLite 的 <strong>LIMIT</strong> 子句用于限制由 SELECT 语句返回的数据数量。<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200407235214.png" alt></p><p>offset 指定开头要跳过多少行，如offset为3，则跳过1~3行；<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200407235230.png" style="zoom:150%;"></p><h2 id="SQLite-Order-By子句"><a href="#SQLite-Order-By子句" class="headerlink" title="SQLite Order By子句"></a>SQLite Order By子句</h2><p>SQLite 的 <strong>ORDER BY</strong> 子句是用来基于一个或多个列按升序或降序顺序排列数据。<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200407235240.png" alt><br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200407235251.png" style="zoom:150%;"></p><h2 id="SQLite-Having子句"><a href="#SQLite-Having子句" class="headerlink" title="SQLite Having子句"></a>SQLite Having子句</h2><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200407235313.png" alt><br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200408002140.png" style="zoom:150%;"></p><h1 id="SQLite-Distinct关键字"><a href="#SQLite-Distinct关键字" class="headerlink" title="SQLite Distinct关键字"></a>SQLite Distinct关键字</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200408002201.png" alt></p><h1 id="SQLite约束"><a href="#SQLite约束" class="headerlink" title="SQLite约束"></a>SQLite约束</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200408002535.png" alt><br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200408002557.png" alt></p><h1 id="SQLite-NULL-值"><a href="#SQLite-NULL-值" class="headerlink" title="SQLite NULL 值"></a>SQLite NULL 值</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200408002619.png" alt></p><h1 id="SQLite-Trigger-触发器"><a href="#SQLite-Trigger-触发器" class="headerlink" title="SQLite Trigger(触发器)"></a>SQLite Trigger(触发器)</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200408002711.png" alt><br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200408002959.png" alt></p><p><strong>实例</strong><br>让我们假设一个情况，我们要为被插入到新创建的 COMPANY 表（如果已经存在，则删除重新创建）中的每一个记录保持审计试验；<br>为了保持审计试验，我们将创建一个名为 AUDIT 的新表。每当 COMPANY 表中有一个新的记录项时，日志消息将被插入其中；<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200409000937.png" style="zoom:150%;"><br>往company表中添加新记录：<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200409001004.png" style="zoom:200%;"><br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200409001043.png" alt></p><h1 id="SQLite-索引（Index）"><a href="#SQLite-索引（Index）" class="headerlink" title="SQLite 索引（Index）"></a>SQLite 索引（Index）</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200409001341.png" alt></p><ul><li><p>创建索引</p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410114318.png" style="zoom:150%;"></li><li><p>索引类型<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094111.png" alt></p></li><li><p>删除索引<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094124.png" alt></p></li><li><p>什么情况下要避免使用索引？<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094158.png" alt></p></li><li><p>示例</p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094210.png" style="zoom:150%;"></li></ul><h1 id="SQLite-Indexed-By"><a href="#SQLite-Indexed-By" class="headerlink" title="SQLite Indexed By"></a>SQLite Indexed By</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094224.png" alt></p><ul><li>示例<img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094238.png" style="zoom: 300%;"></li></ul><h1 id="SQLite-Alter-命令"><a href="#SQLite-Alter-命令" class="headerlink" title="SQLite Alter 命令"></a>SQLite Alter 命令</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094250.png" alt></p><ul><li>实例：<img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094301.png" style="zoom:150%;"></li></ul><h1 id="SQLite-视图（View）"><a href="#SQLite-视图（View）" class="headerlink" title="SQLite 视图（View）"></a>SQLite 视图（View）</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094316.png" alt></p><ul><li>实例：<img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094335.png" style="zoom: 200%;"></li></ul><h1 id="SQLite-事务（Transaction）"><a href="#SQLite-事务（Transaction）" class="headerlink" title="SQLite 事务（Transaction）"></a>SQLite 事务（Transaction）</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094353.png" alt></p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094534.png" style="zoom:150%;"><h1 id="SQLite-子查询"><a href="#SQLite-子查询" class="headerlink" title="SQLite 子查询"></a>SQLite 子查询</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094559.png" alt></p><ul><li>实例：<img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094610.png" style="zoom:150%;"></li></ul><h1 id="SQLite-Autoincrement"><a href="#SQLite-Autoincrement" class="headerlink" title="SQLite Autoincrement"></a>SQLite Autoincrement</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094620.png" alt></p><h1 id="SQLite-日期-amp-时间"><a href="#SQLite-日期-amp-时间" class="headerlink" title="SQLite 日期 &amp; 时间"></a>SQLite 日期 &amp; 时间</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094641.png" alt></p><ul><li><p>时间字符串(timestring)</p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094654.png" style="zoom:150%;"></li><li><p>修饰符（Modifier）</p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094706.png" style="zoom:150%;"></li><li><p>格式化</p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094718.png" style="zoom:150%;"></li><li><p>实例</p><ul><li><p>当前时间（格林尼治时间GMT,约等于UTC）</p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094731.png" style="zoom:150%;"><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094834.png" style="zoom: 150%;"></li><li><p>当前时间 (本地)</p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094851.png" style="zoom:150%;"><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410094911.png" style="zoom:150%;"></li><li><p>当前时间（unix时间戳）</p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410095049.png" style="zoom:150%;"></li></ul></li></ul><h1 id="SQLite-常用函数"><a href="#SQLite-常用函数" class="headerlink" title="SQLite 常用函数"></a>SQLite 常用函数</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410095113.png" alt></p><h1 id="SQLite-API-C-C-接口"><a href="#SQLite-API-C-C-接口" class="headerlink" title="SQLite API C/C++接口"></a>SQLite API C/C++接口</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410095218.png" alt></p><h2 id="函数原型-sqlite3-open"><a href="#函数原型-sqlite3-open" class="headerlink" title="函数原型: sqlite3_open()"></a>函数原型: sqlite3_open()</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sqlite3_open</span><span class="token punctuation">(</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>filename<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">/* Database filename (UTF-8) */</span>  sqlite3 <span class="token operator">*</span><span class="token operator">*</span>ppDb          <span class="token comment" spellcheck="true">/* OUT: SQLite db handle */</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong>：<br>    <em> 不管打开是否出错，都需要调用sqlite_close()关闭；    </em> 如果 _filename_ 参数是 NULL 或 ‘:memory:’，那么 sqlite3_open() 将会在 RAM 中创建一个内存数据库；<br>    * 如果该名称的文件不存在，sqlite3_open() 将创建一个新的命名为该名称的数据库文件并打开；</p><h2 id="函数原型：sqlite3-exec"><a href="#函数原型：sqlite3-exec" class="headerlink" title="函数原型：sqlite3_exec()"></a>函数原型：sqlite3_exec()</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sqlite3_exec</span><span class="token punctuation">(</span>  sqlite3<span class="token operator">*</span><span class="token punctuation">,</span>                                  <span class="token comment" spellcheck="true">/* An open database */</span>  <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>sql<span class="token punctuation">,</span>                           <span class="token comment" spellcheck="true">/* SQL to be evaluated */</span>  <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">/* Callback function */</span>  <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">,</span>                                    <span class="token comment" spellcheck="true">/* 1st argument to callback */</span>  <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>errmsg                              <span class="token comment" spellcheck="true">/* Error msg written here */</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>回调函数：<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410095245.png" alt></p><p><strong>注意</strong>：如果提供 了errmsg，用来创建错误消息的内存是在堆上分布的。 故在调用后，应该检查一下是否为null值，如果有错误发生，使用sqlite3_free()释放errmsg占用的内存。</p><h2 id="实例：连接数据库"><a href="#实例：连接数据库" class="headerlink" title="实例：连接数据库"></a>实例：连接数据库</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//test_open.c</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sqlite3.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   sqlite3 <span class="token operator">*</span>db<span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>zErrMsg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> rc<span class="token punctuation">;</span>   rc <span class="token operator">=</span> <span class="token function">sqlite3_open</span><span class="token punctuation">(</span><span class="token string">"test.db"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> rc <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Can't open database: %s\n"</span><span class="token punctuation">,</span> <span class="token function">sqlite3_errmsg</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Opened database successfully\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">sqlite3_close</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译：</p><pre class="line-numbers language-shell"><code class="language-shell">#最初使用这种方式，发现找不到头文件gcc -o test_open test_open.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">#然后将头文件拷贝到目录下，改成#include "sqlite3.h",#提示找不到引用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410095308.png" alt></p><pre class="line-numbers language-shell"><code class="language-shell">#然后发现应该加 -l sqlite3, 发现依旧出错gcc -o test_open test_open.c -l sqlite3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410095321.png" alt><br>使用<code>find -name &quot;libsqlite3.so&quot;</code>发现为找到相关库；</p><p>最后解决方案,是没有安装sqlite-devel,安装：</p><pre class="line-numbers language-shell"><code class="language-shell">sudo yum install sqlite-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410095333.png" alt></p><h2 id="实例：创建表"><a href="#实例：创建表" class="headerlink" title="实例：创建表"></a>实例：创建表</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sqlite3.h></span></span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>NotUsed<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>azColName<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> i<span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s = %s\n"</span><span class="token punctuation">,</span> azColName<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">"NULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   sqlite3 <span class="token operator">*</span>db<span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>zErrMsg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span>  rc<span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>sql<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* Open database */</span>   rc <span class="token operator">=</span> <span class="token function">sqlite3_open</span><span class="token punctuation">(</span><span class="token string">"test.db"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> rc <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Can't open database: %s\n"</span><span class="token punctuation">,</span> <span class="token function">sqlite3_errmsg</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"Opened database successfully\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/* Create SQL statement */</span>   sql <span class="token operator">=</span> <span class="token string">"CREATE TABLE COMPANY("</span>  \         <span class="token string">"ID INT PRIMARY KEY     NOT NULL,"</span> \         <span class="token string">"NAME           TEXT    NOT NULL,"</span> \         <span class="token string">"AGE            INT     NOT NULL,"</span> \         <span class="token string">"ADDRESS        CHAR(50),"</span> \         <span class="token string">"SALARY         REAL );"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* Execute SQL statement */</span>   rc <span class="token operator">=</span> <span class="token function">sqlite3_exec</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>zErrMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> rc <span class="token operator">!=</span> SQLITE_OK <span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"SQL error: %s\n"</span><span class="token punctuation">,</span> zErrMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sqlite3_free</span><span class="token punctuation">(</span>zErrMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"Table created successfully\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">sqlite3_close</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实例：SELECT-操作"><a href="#实例：SELECT-操作" class="headerlink" title="实例：SELECT 操作"></a>实例：SELECT 操作</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sqlite3.h></span></span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>azColName<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> i<span class="token punctuation">;</span>   <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s: "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s = %s\n"</span><span class="token punctuation">,</span> azColName<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">"NULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   sqlite3 <span class="token operator">*</span>db<span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>zErrMsg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> rc<span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>sql<span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> data <span class="token operator">=</span> <span class="token string">"Callback function called"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* Open database */</span>   rc <span class="token operator">=</span> <span class="token function">sqlite3_open</span><span class="token punctuation">(</span><span class="token string">"test.db"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> rc <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Can't open database: %s\n"</span><span class="token punctuation">,</span> <span class="token function">sqlite3_errmsg</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Opened database successfully\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/* Create SQL statement */</span>   sql <span class="token operator">=</span> <span class="token string">"SELECT * from COMPANY"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* Execute SQL statement */</span>   rc <span class="token operator">=</span> <span class="token function">sqlite3_exec</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>zErrMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> rc <span class="token operator">!=</span> SQLITE_OK <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"SQL error: %s\n"</span><span class="token punctuation">,</span> zErrMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sqlite3_free</span><span class="token punctuation">(</span>zErrMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"Operation done successfully\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">sqlite3_close</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实例：UPDATE操作"><a href="#实例：UPDATE操作" class="headerlink" title="实例：UPDATE操作"></a>实例：UPDATE操作</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sqlite3.h></span></span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>azColName<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> i<span class="token punctuation">;</span>   <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s: "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s = %s\n"</span><span class="token punctuation">,</span> azColName<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">"NULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   sqlite3 <span class="token operator">*</span>db<span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>zErrMsg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> rc<span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>sql<span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> data <span class="token operator">=</span> <span class="token string">"Callback function called"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* Open database */</span>   rc <span class="token operator">=</span> <span class="token function">sqlite3_open</span><span class="token punctuation">(</span><span class="token string">"test.db"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> rc <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Can't open database: %s\n"</span><span class="token punctuation">,</span> <span class="token function">sqlite3_errmsg</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Opened database successfully\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/* Create merged SQL statement */</span>   sql <span class="token operator">=</span> <span class="token string">"UPDATE COMPANY set SALARY = 25000.00 where ID=1; "</span> \         <span class="token string">"SELECT * from COMPANY"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* Execute SQL statement */</span>   rc <span class="token operator">=</span> <span class="token function">sqlite3_exec</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>zErrMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> rc <span class="token operator">!=</span> SQLITE_OK <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"SQL error: %s\n"</span><span class="token punctuation">,</span> zErrMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sqlite3_free</span><span class="token punctuation">(</span>zErrMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"Operation done successfully\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">sqlite3_close</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实例：Delete"><a href="#实例：Delete" class="headerlink" title="实例：Delete"></a>实例：Delete</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sqlite3.h></span></span><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>azColName<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">int</span> i<span class="token punctuation">;</span>   <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"%s: "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s = %s\n"</span><span class="token punctuation">,</span> azColName<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">"NULL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   sqlite3 <span class="token operator">*</span>db<span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>zErrMsg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> rc<span class="token punctuation">;</span>   <span class="token keyword">char</span> <span class="token operator">*</span>sql<span class="token punctuation">;</span>   <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> data <span class="token operator">=</span> <span class="token string">"Callback function called"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* Open database */</span>   rc <span class="token operator">=</span> <span class="token function">sqlite3_open</span><span class="token punctuation">(</span><span class="token string">"test.db"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> rc <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Can't open database: %s\n"</span><span class="token punctuation">,</span> <span class="token function">sqlite3_errmsg</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Opened database successfully\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/* Create merged SQL statement */</span>   sql <span class="token operator">=</span> <span class="token string">"DELETE from COMPANY where ID=2; "</span> \         <span class="token string">"SELECT * from COMPANY"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* Execute SQL statement */</span>   rc <span class="token operator">=</span> <span class="token function">sqlite3_exec</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span> <span class="token operator">&amp;</span>zErrMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span> rc <span class="token operator">!=</span> SQLITE_OK <span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"SQL error: %s\n"</span><span class="token punctuation">,</span> zErrMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">sqlite3_free</span><span class="token punctuation">(</span>zErrMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token string">"Operation done successfully\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">sqlite3_close</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SQLite线程安全和并发"><a href="#SQLite线程安全和并发" class="headerlink" title="SQLite线程安全和并发"></a>SQLite线程安全和并发</h1><h2 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h2><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410095351.png" alt><br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410095409.png" alt></p><blockquote><p><a href="https://jin-yang.github.io/post/sqlite-introduce.html" target="_blank" rel="noopener">https://jin-yang.github.io/post/sqlite-introduce.html</a></p></blockquote><h2 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h2><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410095421.png" alt><br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410095442.png" alt></p><h1 id="Rollback-journal-和-WAL"><a href="#Rollback-journal-和-WAL" class="headerlink" title="Rollback journal 和 WAL"></a>Rollback journal 和 WAL</h1><ul><li><p>Rollback journal</p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410095455.png" style="zoom:150%;"></li><li><p>WAL</p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200410095507.png" style="zoom:150%;"></li></ul><h1 id="SQLite-database-lock错误"><a href="#SQLite-database-lock错误" class="headerlink" title="SQLite database lock错误"></a>SQLite database lock错误</h1><ul><li><p>说明<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200407222707.png" alt></p></li><li><p>可能出现database lock错误的原因<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200407222759.png" alt></p></li></ul><h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><blockquote><p><a href="http://zetcode.com/db/sqlitec/" target="_blank" rel="noopener">SQLite C tutorial</a><br><a href="https://www.runoob.com/sqlite/sqlite-tutorial.html" target="_blank" rel="noopener">SQLite教程</a><br><a href="https://zhuanlan.zhihu.com/p/29234064" target="_blank" rel="noopener">图解 SQL 里的各种 JOIN</a><br><a href="https://github.com/xiangwangfeng/xiangwangfeng.github.io/wiki/SQLite-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%92%8C%E5%B9%B6%E5%8F%91" target="_blank" rel="noopener">SQLite 线程安全和并发</a><br><a href="https://xiaozhuanlan.com/topic/1754328960" target="_blank" rel="noopener">SQLite WAL 模式简单介绍</a><br><a href="https://wordpress.semnaitik.com/sqlite-error-database-is-locked-code-5/" target="_blank" rel="noopener">SQLite Error Database is Locked- How to resolve?</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;数据库基础概念&quot;&gt;&lt;a href=&quot;#数据库基础概念&quot; class=&quot;headerlink&quot; title=&quot;数据库基础概念&quot;&gt;&lt;/a&gt;数据库基础概念&lt;/h1&gt;&lt;h2 id=&quot;数据库的模型&quot;&gt;&lt;a href=&quot;#数据库的模型&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.littlekang.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="SQLite" scheme="http://blog.littlekang.xyz/tags/SQLite/"/>
    
      <category term="数据库" scheme="http://blog.littlekang.xyz/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式固件升级_tomcat搭建http服务</title>
    <link href="http://blog.littlekang.xyz/article/2dce40ee/"/>
    <id>http://blog.littlekang.xyz/article/2dce40ee/</id>
    <published>2020-03-12T01:42:15.000Z</published>
    <updated>2020-03-12T01:55:43.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改登陆用户名密码"><a href="#修改登陆用户名密码" class="headerlink" title="修改登陆用户名密码"></a>修改登陆用户名密码</h1><p>首先进入tomcat文件夹的conf文件夹，首先复制一份tomcat-users.xml作为备份<br>然后修改这个配置文件，用记事本打开，找到</p><pre><code>&lt;!--&lt;role rolename=&quot;tomcat&quot;/&gt;&lt;role rolename=&quot;role1&quot;/&gt;&lt;user username=&quot;tomcat&quot; password=&quot;&lt;must-be-changed&gt;&quot; roles=&quot;tomcat&quot;/&gt;&lt;user username=&quot;both&quot; password=&quot;&lt;must-be-changed&gt;&quot; roles=&quot;tomcat,role1&quot;/&gt;&lt;user username=&quot;role1&quot; password=&quot;&lt;must-be-changed&gt;&quot; roles=&quot;role1&quot;/&gt;--&gt;</code></pre><p>去掉开头和结尾的<code>&lt;!-- --&gt;</code>然后修改为</p><pre><code>&lt;role rolename=&quot;manager-gui&quot;/&gt;&lt;role rolename=&quot;admin-gui&quot;/&gt;&lt;user username=&quot;tomcat&quot; password=&quot;tomcat&quot; roles=&quot;manager-gui,admin-gui&quot;/&gt;</code></pre><p>其中如果你只添加manager-gui可以进去sever status和manager app，添加了admin-gui以后才能进去host-manager，然后重启tomcat<br>账号密码为：tomcat<br>如果cmd窗口一闪而过你又想知道是哪儿报错了，请用cmd进入tomcat/bin文件夹然后用debug模式启动———catalina debug,一般是端口被占用，比如被你eclipse已经调用了tomcat</p><h1 id="tomcat-server-xml配置说明"><a href="#tomcat-server-xml配置说明" class="headerlink" title="tomcat server.xml配置说明"></a>tomcat server.xml配置说明</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200312091604.png" alt></p><ul><li><p>server.xml描述了如何启动Tomcat Server</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Server</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Listener</span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GlobaNamingResources</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GlobaNamingResources</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Service</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Engine</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Logger</span> <span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Realm</span> <span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>host</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Logger</span> <span class="token punctuation">/></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token punctuation">/></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>host</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Engine</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Service</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Server</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>参数说明：<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200312092234.png" alt></p></li></ul><h1 id="修改配置，增加固件文件夹"><a href="#修改配置，增加固件文件夹" class="headerlink" title="修改配置，增加固件文件夹"></a>修改配置，增加固件文件夹</h1><ul><li><p>新建固件文件夹fw<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200312094524.png" alt></p></li><li><p>修改server.xml，使fw可以被访问<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200312093806.png" alt></p></li><li><p>新增index.xml，helloworld</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello world~~<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><blockquote><p><a href="https://www.cnblogs.com/f-ck-need-u/p/8120008.html" target="_blank" rel="noopener">https://www.cnblogs.com/f-ck-need-u/p/8120008.html</a><br><a href="https://blog.csdn.net/zcyhappy1314/article/details/10356909" target="_blank" rel="noopener">https://blog.csdn.net/zcyhappy1314/article/details/10356909</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;修改登陆用户名密码&quot;&gt;&lt;a href=&quot;#修改登陆用户名密码&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.littlekang.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="http" scheme="http://blog.littlekang.xyz/tags/http/"/>
    
      <category term="upgrade" scheme="http://blog.littlekang.xyz/tags/upgrade/"/>
    
      <category term="嵌入式" scheme="http://blog.littlekang.xyz/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用kermit通过串口升级openwrt uboot</title>
    <link href="http://blog.littlekang.xyz/article/57e8f993/"/>
    <id>http://blog.littlekang.xyz/article/57e8f993/</id>
    <published>2020-03-11T07:36:04.000Z</published>
    <updated>2020-07-28T06:57:35.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><p>因为购买的MT7688模块自带uboot，tftp升级固件功能无法使用，tftp一直显示错误，无法升级文件系统；</p><p>好在还可以通过串口升级uboot.</p><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200311155042.png" alt></p><p>在板子启动的时候，输入“7”来选择通过串口升级uboot，然后看到下面的输出：<br>Ready for binary (kermit) download to 0x80100000 at 57600 bps…</p><h1 id="ckermit串口工具"><a href="#ckermit串口工具" class="headerlink" title="ckermit串口工具"></a>ckermit串口工具</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在Linux环境下使用较多的两款串口软件分别是minicom和ckermit，其中minicom用得最多，不少Linux发行版已经自带。但不少人反映minicom有时会有问题，u-boot开发者也都推荐使用ckermit，下面我们就来认识一下ckermit串口工具。<br>c-kermit是基于kermit文件传输协议的串口工具，其配置和使用较为简单；</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-shell"><code class="language-shell">sudo apt-get install ckermit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>c-kermit启动时，会从当前用户目录下查找.kermrc配置文件，因此我们先在$HOME目录下创建一个.kermrc文件，然后编辑文件内容如下：</p><pre><code>set line /dev/ttyUSB0　　 # 根据实际情况填写，可以用ls查看 /dev/tty*set speed 57600　　　　    # 根据实际情况填写set carrier-watch off set handshake none set flow-control none robust set file type bin set file name lit set rec  pack 1000 set send pack 1000　　    # 这里可以改大一点，方便下载内核set window 5 </code></pre><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><pre class="line-numbers language-shell"><code class="language-shell">#直接进入连接模式sudo kermit -c  #退回到命令模式，使用快捷键ctrl + \# 按下Ctrl + \ ,再按c 就跳回kermit跳回串口控制界面。# 按下Ctrl + \ ,再按q ，则退出kermit。#如果需要再次x显示连接模式，直接输入c#在命令模式下可以输入shell命令来进行相应的操作,如cd 、ls、pwd等# 传输文件send filename#退出ckermitexit# 保存log,log将会保存在当前目录log session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="uboot升级"><a href="#uboot升级" class="headerlink" title="uboot升级"></a>uboot升级</h1><pre class="line-numbers language-shell"><code class="language-shell">#与开发板的串口建立连接sudo kermit -c#开发板上电,输入7，进入使用kermit协议升级uboot模式#按快捷键 ctrl + \返回命令模式#发送uboot固件(可以在固件目录下完成以上操作，这样不需要带路径)send uboot.bin#固件传送完毕，uboot升级成功，开发板将自动重启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://www.cnblogs.com/pyhou/p/7196622.html" target="_blank" rel="noopener">https://www.cnblogs.com/pyhou/p/7196622.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;缘由&quot;&gt;&lt;a href=&quot;#缘由&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.littlekang.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="openwrt" scheme="http://blog.littlekang.xyz/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>固件加头部信息</title>
    <link href="http://blog.littlekang.xyz/article/b3de8d7/"/>
    <id>http://blog.littlekang.xyz/article/b3de8d7/</id>
    <published>2020-03-09T06:13:52.000Z</published>
    <updated>2020-03-09T13:58:36.175Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考格式"><a href="#参考格式" class="headerlink" title="参考格式"></a>参考格式</h1><p>固件的头部信息，可以是多种格式，一般可能更多的是二进制数据格式，考虑到后期方便扩展，这里选择使用json格式。</p><pre><code>ABCD{    &quot;magic&quot;:&quot;device_xx&quot;,    &quot;appVer&quot;:&quot;1.0.1&quot;,    &quot;hardVer&quot;:&quot;1.0.1&quot;,    &quot;format&quot;:&quot;elf&quot;,    &quot;size&quot;:1234,    &quot;md5&quot;:&quot;2d02e669731cbade6a64b58d602cf2a4&quot;}</code></pre><h1 id="JSON参数说明"><a href="#JSON参数说明" class="headerlink" title="JSON参数说明"></a>JSON参数说明</h1><p><strong>ABCD</strong> – json数据的长度，2字节，16进制字串格式，如 3456表示0x3456;</p><p><strong>magic</strong> – 魔数，表示固件的类型，以<code>设备类型_XX</code>表示，其中<code>XX</code>用于区别同一类型设备的不同版本；</p><p><strong>appVer</strong> – 固件版本号，设备根据版本号决定是否升级；</p><p><strong>hardVer</strong> – 支持的硬件(最低)版本，设备根据硬件版本信息，判断此固件是否适用，从而决定是否可以升级；</p><p><strong>format</strong> – 固件格式，主要有如下格式：</p><table><thead><tr><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>elf</td><td>linux可执行文件格式，主要用于网关</td></tr><tr><td>ipk</td><td>openwrt固件安装包格式，用于网关</td></tr><tr><td>bin</td><td>二进制格式, 主要用于子设备</td></tr><tr><td>hex</td><td>hex文件格式，主要用于子设备</td></tr></tbody></table><p><strong>size</strong> – 固件大小(不包含固件头json信息)，int型，占4字节，单位byte；</p><p><strong>md5</strong> – 固件的MD5校验值, 32位字符串。</p><h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><h2 id="jq-–-JSON命令行处理工具"><a href="#jq-–-JSON命令行处理工具" class="headerlink" title="jq – JSON命令行处理工具"></a>jq – JSON命令行处理工具</h2><h3 id="jq简介"><a href="#jq简介" class="headerlink" title="jq简介"></a>jq简介</h3><p>jq 是一款命令行下处理 JSON 数据的工具。其可以接受标准输入，命令管道或者文件中的 JSON 数据，经过一系列的过滤器(filters)和表达式的转后形成我们需要的数据结构并将结果输出到标准输出中。jq 的这种特性使我们可以很容易地在 Shell 脚本中调用它。</p><p>需要说明的是 jq 只能接受 well form 的 JSON 字符串作为输入内容。也就是说输入内容必须严格遵循 JSON 格式的标准。所有的属性名必须是以双引号包括的字符串。对象的最后一个属性的末尾或者数组的最后一个元素的末尾不能有逗号。否则 jq 会抛出无法解析 JSON 的错误。</p><h3 id="jq基本操作"><a href="#jq基本操作" class="headerlink" title="jq基本操作"></a>jq基本操作</h3><ul><li><p>帮助</p><pre class="line-numbers language-shell"><code class="language-shell">jq -h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200309090742.png" alt></p></li><li><p>格式化json</p><pre class="line-numbers language-shell"><code class="language-shell"># -c 删除漂亮的格式输出echo '{"url": "mozillazg.com"}' |jq -c .{"url":"mozillazg.com"}echo '{"url": "mozillazg.com"}' |jq .{  "url": "mozillazg.com"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>获取某个key值<br><code>.key</code>, <code>.foo.bar</code>, <code>[&quot;key&quot;]</code></p><pre class="line-numbers language-shell"><code class="language-shell"># 如果key对应的值存在，则输出值echo '{"url": "mozillazg.com"}' |jq .url"mozillazg.com"echo '{"url": "mozillazg.com"}' | jq '.["url"]'"mozillazg.com"# 如果key对应的值不存在，则输出nullecho '{"notfoo": true, "alsonotfoo": false}' | jq '.foo'nullecho '{"notfoo": true, "alsonotfoo": false}' | jq .foonull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数组操作<br><code>.[]</code></p><pre class="line-numbers language-shell"><code class="language-shell"># 取出所有元素echo '[{"name": "tom"}, {"name": "mozillazg"}]' |jq .[]{  "name": "tom"}{  "name": "mozillazg"}# 取出第1个元素，下标从0开始echo '[{"name": "tom"}, {"name": "mozillazg"}]' |jq .[0]{  "name": "tom"}#取出下标为 0 到 2(不包括2)之间的元素echo '[{"name": "tom"}, {"name": "mozillazg"}, {"name": "jim"}]' |jq .[0:2][  {    "name": "tom"  },  {    "name": "mozillazg"  }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>取出数组元素中的key的值</p><pre class="line-numbers language-shell"><code class="language-shell">echo '[{"name": "foo"},{"name": "bar"},{"name": "foobar"}]' |jq .[].name"foo""bar""foobar"# 使用管道echo '[{"name": "foo"},{"name": "bar"},{"name": "foobar"}]' |jq '.[]|.name'"foo""bar""foobar"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将结果重新组成数组</p><pre class="line-numbers language-shell"><code class="language-shell">echo '[{"name": "foo"},{"name": "bar"},{"name": "foobar"}]' |jq [.[].name][  "foo",  "bar",  "foobar"]# 使用map实现echo '[{"name": "foo"},{"name": "bar"},{"name": "foobar"}]' |jq 'map(.name)'[  "foo",  "bar",  "foobar"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>处理文件</p><p>使用<code>jq [选项] &lt;jq表达式&gt; [files]</code>形式；<br>使用<code>cat [files] | jq [选项] &lt;jq表达式&gt;</code></p></li></ul><h3 id="jq高级操作"><a href="#jq高级操作" class="headerlink" title="jq高级操作"></a>jq高级操作</h3><ul><li><p>管道</p><ul><li>支持管道线|，它如同linux命令中的管道线——把前面命令的输出当作是后面命令的输入。</li></ul><pre class="line-numbers language-shell"><code class="language-shell">echo '{"url": "mozillazg.com", "name": "mozillazg"}' | jq '.|.url'"mozillazg.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>获取内容的长度(字符串，数组的长度)</li></ul><pre class="line-numbers language-shell"><code class="language-shell">echo '{"url": "mozillazg.com", "name": "mozillazg"}' |jq '.url|length'13echo '["mozillazg.com", "mozillazg"]' |jq '.|length'2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>map<br><code>map(foo)</code>可以实现对数组的每一项进行操作，然后合并结果的功能:</p><pre class="line-numbers language-shell"><code class="language-shell">echo '["mozillazg.com", "mozillazg"]' | jq 'map(length)'[  13,  9]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>filter(select)<br><code>select(foo)</code> 可以实现对输入项进行判断，只返回符合条件的项:</p><pre class="line-numbers language-shell"><code class="language-shell">echo '["mozillazg.com", "mozillazg"]' | jq 'map(select(.|length > 9))'[  "mozillazg.com"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>字符串插值，拼接<br>可以使用 <code>\(foo)</code> 实现字符串插值功能:</p><pre class="line-numbers language-shell"><code class="language-shell">echo '{"url": "mozillazg.com", "name": "mozillazg"}' |jq '"hi \(.name)"'"hi mozillazg"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意要用双引号包围起来，表示是一个字符串。</p></li><li><p>if/elif/else<br>可以使用 <code>if .. then .. elif .. then .. else .. end</code> 实现条件判断:</p><pre class="line-numbers language-shell"><code class="language-shell">echo '[0, 1, 2, 3]' | jq 'map(if . == 0 then "zero" elif . == 1 then "one" elif . == 2 then "two" else "many" end)'[  "zero",  "one",  "two",  "many"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>构造object或数组<br>可以通过 <code>{}</code> 和 <code>[]</code> 构造新的 object 或 数组：</p><pre class="line-numbers language-shell"><code class="language-shell"># objectecho '["mozillazg.com", "mozillazg"]' |jq '{name: .[1]}'{  "name": "mozillazg"}# arrayecho '{"url": "mozillazg.com", "name": "mozillazg"}' |jq '[.name, .url]'[  "mozillazg",  "mozillazg.com"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="jq内置运算支持"><a href="#jq内置运算支持" class="headerlink" title="jq内置运算支持"></a>jq内置运算支持</h3><p>jq 内部支持的数据类型有：数字，字符串，数组和对象(object)。并且在这些数据类型的基础上, jq 提供了一些基本的操作符来实现一些基本的运算和数据操作。列举如下：</p><ul><li>数学运算。对于数字类型，jq 实现了基本的加减乘除(/)和求余(%)运算。对于除法运算，jq 最多支持 16 位小数。</li><li>字符串操作。jq 提供字符串的连接操作(运算符为’+’，例如：”tom “+”jerry”结果为”tom jerry”)，字符串的复制操作(例如：’a’*3 结果为’aaa’)，以及字符串分割操作(将字符串按照指定的分割符分成数组，例如”sas”/“s”的结果为[“”,”a”,””]，而”sas”/“a”的结果为[“s”,”s”]。</li><li>数组操作。jq 提供两种数组运算：并集(‘+’)运算，结果数组中包含参与运算的数组的所有元素。差集运算(‘-‘)，例如：有数组 a,b, a-b 的结果为所有在 a 中且不包含在 b 中的元素组成的数组。</li><li>对象操作。jq 实现了两个 JSON 对象的合并操作(merge)。当两个参与运算的对象包含相同的属性时则保留运算符右侧对象的属性值。有两种合并运算符：’+’和’<em>‘。所不同的是，运算符’+’只做顶层属性的合并，运算符’</em>‘则是递归合并。例如：有对象 a={“a”:{“b”:1}}, b={“a”:{“c”:2}}，a+b 的结果为{“a”:{“c”:2}}，而 a*b 的结果为{“a”:{“b”:1,”c”:2}}</li><li>比较操作：jq 内部支持的比较操作符有==, !=,&gt;,&gt;=,&lt;=和&lt;。其中，’==’的规则和 javascript 中的恒等(‘===’)类似，只有两个操作数的类型和值均相同时其结果才是 true。</li><li>逻辑运算符: and/or/not。在 jq 逻辑运算中，除了 false 和 null 外，其余的任何值都等同于 true。</li><li>默认操作符(‘//‘), 表达式’a//b’表示当表达式 a 的值不是 false 或 null 时，a//b 等于 a，否则等于 b。</li></ul><h3 id="jq修改json数据"><a href="#jq修改json数据" class="headerlink" title="jq修改json数据"></a>jq修改json数据</h3><p>原json内容：<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200309142452.png" alt></p><p>例如需要修改size的值为123，方式如下：</p><pre class="line-numbers language-shell"><code class="language-shell">#重定向到新的文件，注意不能是原文件cat firmware.json | jq 'to_entries |map(if .key == "size"then . + {"value":123}else .end) |from_entries' > new.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200309143222.png" alt></p><h3 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h3><blockquote><p><a href="https://www.ibm.com/developerworks/cn/linux/1612_chengg_jq/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/1612_chengg_jq/index.html</a></p><p><a href="https://mozillazg.com/2018/01/jq-use-examples-cookbook.html#hidid4" target="_blank" rel="noopener">https://mozillazg.com/2018/01/jq-use-examples-cookbook.html#hidid4</a></p><p><a href="https://github.com/meetbill/xbatch/wiki/jq#22-%E6%A0%B9%E6%8D%AE-key-%E6%9F%A5%E8%AF%A2-json-%E7%9A%84%E5%80%BC" target="_blank" rel="noopener">https://github.com/meetbill/xbatch/wiki/jq#22-%E6%A0%B9%E6%8D%AE-key-%E6%9F%A5%E8%AF%A2-json-%E7%9A%84%E5%80%BC</a></p><p><a href="https://www.jianshu.com/p/f50c87b7eaea" target="_blank" rel="noopener">https://www.jianshu.com/p/f50c87b7eaea</a></p></blockquote><h2 id="shell获取文件的大小"><a href="#shell获取文件的大小" class="headerlink" title="shell获取文件的大小"></a>shell获取文件的大小</h2><pre class="line-numbers language-shell"><code class="language-shell">ls -l filename | awk '{print $5}'du -b filename | awk '{print $1}'wc -c filename | awk '{print $1}'wc -c < filenamestat -c "%s" filename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="shell计算文件的MD5"><a href="#shell计算文件的MD5" class="headerlink" title="shell计算文件的MD5"></a>shell计算文件的MD5</h2><p><strong>md5sum</strong>: </p><p>显示或检查 MD5(32-bit) 校验和，若没有文件选项，或者文件处为”-“，则从标准输入读取。<br><strong>echo -n</strong> : 不打印换行符。<br><strong>cut</strong>: cut用来从标准输入或文本文件中剪切列或域。剪切文本可以将之粘贴到一个文本文件。<br>        -d 指定与空格和tab键不同的域分隔符。-f1 表示第一个域。</p><pre class="line-numbers language-shell"><code class="language-shell">md5sum iot_gateway5b5e4be07a7960ef1450f3e8c8b22df9  iot_gatewaymd5sum iot_gateway | cut -d ' ' -f15b5e4be07a7960ef1450f3e8c8b22df9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="shell删除某个字符"><a href="#shell删除某个字符" class="headerlink" title="shell删除某个字符"></a>shell删除某个字符</h2><p>例如使用 <code>tr -d &#39;[ \t]</code> 删除换行字符</p><pre class="line-numbers language-shell"><code class="language-shell">echo "    123  567   " | tr -d '[ \t]' #输出12345<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="使用shell添加头部信息"><a href="#使用shell添加头部信息" class="headerlink" title="使用shell添加头部信息"></a>使用shell添加头部信息</h1><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bash# 删除旧固件rm -rf ./iot_gateway*.elfrm -rf ./iot_gateway*.ipk# 生成的固件路径FIRMWARE_ELF_DIR= xxxFIRMWARE_IPK_DIR= xxx# 固件加头打包时间PACK_TIME=$(date "+%Y-%m-%d %H:%M:%S")echo "packtime: $PACK_TIME"# 拷贝固件至当前目录暂存cp $FIRMWARE_ELF_DIR/iot_gateway ./raw.elfcp $FIRMWARE_IPK_DIR/iot_gateway*.ipk ./raw.ipkecho "copy firmware done."# 获取固件的大小ELF_SIZE=$(ls -l ./raw.elf | awk '{print $5}')IPK_SIZE=$(ls -l ./raw.ipk | awk '{print $5}')echo "elf size: $ELF_SIZE"echo "ipk size: $IPK_SIZE"# 计算固件的MD5ELF_MD5=$(md5sum raw.elf | cut -d ' ' -f1)IPK_MD5=$(md5sum raw.ipk | cut -d ' ' -f1)echo "elf md5: $ELF_MD5"echo "ipk md5: $ELF_MD5"# 填充固件头信息到jsoncat firmware.json |    jq -c "to_entries |        map(if .key == \"size\"            then . + {\"value\":$ELF_SIZE}            elif .key == \"format\"            then . + {\"value\":\"elf\"}            elif .key == \"timestamp\"            then . + {\"value\":\"$PACK_TIME\"}            elif .key == \"md5\"            then . + {\"value\":\"$ELF_MD5\"}            else .            end           ) |        from_entries" | tr -d '\n' > elf.jsoncat firmware.json |    jq -c "to_entries |        map(if .key == \"size\"            then . + {\"value\":$IPK_SIZE}            elif .key == \"format\"            then . + {\"value\":\"ipk\"}            elif .key == \"timestamp\"            then . + {\"value\":\"$PACK_TIME\"}            elif .key == \"md5\"            then . + {\"value\":\"$IPK_MD5\"}            else .            end           ) |        from_entries" | tr -d '\n' > ipk.json#Debug: printf json信息echo "elf.json:"cat ./elf.json | jq .echo "ipk.json:"cat ./ipk.json | jq .# 获取软件版本ELF_APP_VER=$(cat ./elf.json | jq --raw-output '.appVer')        IPK_APP_VER=$(cat ./ipk.json | jq --raw-output '.appVer')echo "elf app version: $ELF_APP_VER"echo "ipk app version: $IPK_APP_VER"# 计算json的长度,16进制字符串格式ELF_JSON_LEN=$(ls -l ./elf.json | awk '{printf "%04x\n",$5}')IPK_JSON_LEN=$(ls -l ./ipk.json | awk '{printf "%04x\n",$5}')echo "elf json len: $ELF_JSON_LEN"echo "ipk json len: $IPK_JSON_LEN"# 保存到文件echo -n "$ELF_JSON_LEN" >elf.lenecho -n "$IPK_JSON_LEN" >ipk.len# 合并文件cat elf.len elf.json raw.elf >iot_gateway_$ELF_APP_VER.elfcat ipk.len ipk.json raw.ipk >iot_gateway_$ELF_APP_VER.ipkecho "Generate Pakage Done."# 删除生成的临时文件rm -rf elf.json ipk.json raw.elf raw.ipk elf.len ipk.len        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;参考格式&quot;&gt;&lt;a href=&quot;#参考格式&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.littlekang.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="linux" scheme="http://blog.littlekang.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Openwrt软件包创建</title>
    <link href="http://blog.littlekang.xyz/article/a2e5f92e/"/>
    <id>http://blog.littlekang.xyz/article/a2e5f92e/</id>
    <published>2020-02-17T08:37:06.000Z</published>
    <updated>2020-02-18T03:46:37.632Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200217214719.png" alt></p><p><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200217214930.png" alt></p><blockquote><p><a href="https://lingxiankong.github.io/2014-01-06-linux-install.html" target="_blank" rel="noopener">https://lingxiankong.github.io/2014-01-06-linux-install.html</a></p></blockquote><h1 id="Openwrt软件源码包的结构"><a href="#Openwrt软件源码包的结构" class="headerlink" title="Openwrt软件源码包的结构"></a>Openwrt软件源码包的结构</h1><ul><li>Makefile(必选)<ul><li>提供了下载、编译、安装的步骤</li></ul></li><li>patches(可选)<ul><li>补丁文件，用于对源码打补丁</li></ul></li><li>files(可选)<ul><li>配置文件目录</li></ul></li></ul><h1 id="Makefile语法"><a href="#Makefile语法" class="headerlink" title="Makefile语法"></a>Makefile语法</h1><h2 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h2><p>OpenWrt使用三个Makefile的子文件，分别为：</p><blockquote><p><strong>include $(TOPDIR)/rules.mk</strong></p><p><strong>include $(INCLUDE_DIR)/kernel.mk</strong></p><p><strong>include $(INCLUDE_DIR)/package.mk</strong></p></blockquote><p>由这些Makefile子文件确定软件包加入OpenWrt的方式和方法。$(TOPDIR)/rules.mk一般在Makefile的开头，$(INCLUDE_DIR)/kernel.mk文件对于软件包为内核时是不可缺少的，$(INCLUDE_DIR)/package.mk一般在软件包的基本信息完成后再引入。</p><h2 id="示例Makefile"><a href="#示例Makefile" class="headerlink" title="示例Makefile"></a>示例Makefile</h2><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token keyword">include</span> <span class="token variable">$</span><span class="token punctuation">(</span>TOPDIR<span class="token punctuation">)</span>/rules.mkPKG_NAME<span class="token operator">:=</span>bridgePKG_VERSION<span class="token operator">:=</span>1.0.6PKG_RELEASE<span class="token operator">:=</span>1PKG_BUILD_DIR<span class="token operator">:=</span><span class="token variable">$</span><span class="token punctuation">(</span>BUILD_DIR<span class="token punctuation">)</span>/bridge-utils-<span class="token variable">$</span><span class="token punctuation">(</span>PKG_VERSION<span class="token punctuation">)</span>PKG_SOURCE<span class="token operator">:=</span>bridge-utils-<span class="token variable">$</span><span class="token punctuation">(</span>PKG_VERSION<span class="token punctuation">)</span>.tar.gzPKG_SOURCE_URL<span class="token operator">:=</span><span class="token operator">@</span>SF/bridgePKG_MD5SUM<span class="token operator">:=</span>9b7dc52656f5cbec846a7ba3299f73bdPKG_CAT<span class="token operator">:=</span>zcat<span class="token keyword">include</span> <span class="token variable">$</span><span class="token punctuation">(</span>INCLUDE_DIR<span class="token punctuation">)</span>/package.mk<span class="token keyword">define</span> Package/bridge  SECTION<span class="token operator">:=</span>base  CATEGORY<span class="token operator">:=</span>Network  TITLE<span class="token operator">:=</span>Ethernet bridging configuration utility  <span class="token comment" spellcheck="true">#DESCRIPTION:=This variable is obsolete. use the Package/name/description define instead!</span>  URL<span class="token operator">:=</span>http<span class="token punctuation">:</span>//bridge.sourceforge.net/<span class="token keyword">endef</span><span class="token keyword">define</span> Package/bridge/description Ethernet bridging configuration utility Manage ethernet bridging<span class="token punctuation">;</span> a way to connect networks together to form a larger network.<span class="token keyword">endef</span><span class="token keyword">define</span> Build/Configure  <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">call</span> Build/Configure/Default,--with-linux-headers<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>LINUX_DIR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">endef</span><span class="token keyword">define</span> Package/bridge/install  <span class="token variable">$</span><span class="token punctuation">(</span>INSTALL_DIR<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span>/usr/sbin  <span class="token variable">$</span><span class="token punctuation">(</span>INSTALL_BIN<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>PKG_BUILD_DIR<span class="token punctuation">)</span>/brctl/brctl <span class="token variable">$</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span>/usr/sbin/<span class="token keyword">endef</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">eval</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token keyword">call</span> BuildPackage,bridge<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是最为关键的<strong>BuildPackage</strong>宏。它是在<strong>$(INCLUDE_DIR)/package.mk</strong>文件里定义的。<strong>BuildPackage宏只要求一个参数，即要编译的软件包名</strong>，在本例中是“bridge”。所有其他信息都通过宏来获得，这提供了一种内在的简洁性。比如BuildPackage需要软件包的一大串描述信息，我们并不要向它传递冗长的参数，因为我们已经约定描述信息定义在DESCRIPTION宏，BuildPackage从里面读取就可以了。</p><h2 id="软件包信息"><a href="#软件包信息" class="headerlink" title="软件包信息"></a>软件包信息</h2><p>软件包的信息均以PKG_开头，其意思和作用如下：</p><ul><li><strong>PKG_NAME</strong> -软件包的名字, 在 menuconfig 和 ipkg 显示</li><li><strong>PKG_VERSION</strong> -软件包的版本，主干分支的版本正是我们要下载的</li><li><strong>PKG_RELEASE</strong> -这个 makefile 的版本</li><li><strong>PKG_BUILD_DIR</strong> -编译软件包的目录</li><li><strong>PKG_SOURCE</strong> -要下载的软件包的名字，一般是由 PKG_NAME 和 PKG_VERSION 组成</li><li><strong>PKG_SOURCE_URL</strong> -下载这个软件包的链接</li><li><strong>PKG_MD5SUM</strong> -软件包的 MD5 值</li><li><strong>PKG_CAT</strong> -解压软件包的方法 (zcat, bzcat, unzip)</li><li><strong>PKG_BUILD_DEPENDS</strong> -<strong>需要预先构建的软件包，但只是在构建本软件包时，而不是运行的时候</strong>。它的语法和下面的DEPENDS一样。</li></ul><p>PKG_*变量定义了从何处下载这个软件包；@SF是表示从sourceforge网站下载的一个特殊关键字。md5sum用来检查从网上下载的软件包是否完好无损。PKG_BUILD_DIR定义了软件包源代码的解压路径。</p><h2 id="BuildPackage相关的宏"><a href="#BuildPackage相关的宏" class="headerlink" title="BuildPackage相关的宏"></a>BuildPackage相关的宏</h2><p>应用程序的编译包以Package/开头。然后接着软件名，在Package定义中的软件名可以与软件包名不一样，而且可以多个定义。下面使用$(PKG_NAME)只是做一个标志，并非真正使用$(PKG_NAME)，如Package/$(PKG_NAME)。</p><ul><li><strong>SECTION</strong> 表示包的类型，预留。</li><li><strong>CATRGORY</strong> 表示分类，在make menuconfig的菜单下将可以找到。</li><li><strong>TITLE</strong> 用于软件包的简短描述。</li><li><strong>DESCRIPTION</strong> 用于软件包的详细描述，<strong>已放弃使用</strong>。如果使用DESCRIPTION将会提示“error DESCRIPTION:= is obsolete, use Package/PKG_NAME/description”。</li><li><strong>URL</strong> 表示软件包的下载位置。</li><li><strong>MAINTAIER</strong> 表示维护者，选项。</li><li><strong>DEPENDS</strong> 表示与其他软件的依赖。<strong>运行本软件依赖的其他包</strong>。如果存在多个依赖，则每个依赖需要用空格分开。依赖前使用+号表示默认为显示，即对象没有选中时也会显示，使用@则默认为不显示，即当依赖对象选中后才显示。</li></ul><blockquote><p>在用户空间的应用程序软件包中没有内核驱动模块的AUTOLOAD参数。<strong>如果应用软件需要在boot时自动运行，则需要在/etc/init.d中增加相应的脚本文件。脚本文件需要START参数，说明在boot时的优先级，如果在boot过程启动后再关闭，则需要进一步设置STOP参数。如果STOP参数存在，其值必须大于START。脚本文件需要start()和stop()两个函数，start()是执行程序，stop()是关闭程序。</strong>关闭程序一般需要执行killall命令。<strong>由/etc/rc.d/S10boot知道，装载内核驱动模块的优先级为10，需要使用自己设计的内核驱动模块的程序其START的值必须大于10。同样由/etc/rc.d/S40network知道，使用网络通信的程序其START的值必须大于40</strong>。</p></blockquote><ul><li><strong>Package/$(PKG_NAME)/conffiles</strong> 本包安装的配置文件，一行一个。如果文件结尾使用/，则表示为目录。用于备份配置文件说明，在sysupgrade命令执行时将会用到。</li><li><strong>Package/$(PKG_NAME)/description</strong> 软件包的详细描述，取代前面提到的DESCRIPTION详细描述。</li><li><strong>Build/Prepare</strong> 编译准备方法，对于网上下载的软件包不需要再描述。对于非网上下载或自行开发的软件包必须说明编译准备方法。一般的准备方法为：</li></ul><pre class="line-numbers language-ruby"><code class="language-ruby">define <span class="token constant">Build</span><span class="token operator">/</span><span class="token constant">Prepare</span>    mkdir <span class="token operator">-</span>p $<span class="token punctuation">(</span><span class="token constant">PKG_BUILD_DIR</span><span class="token punctuation">)</span>    $<span class="token punctuation">(</span><span class="token constant">CP</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token regex">/* $(PKG_BUILD_DIR)/</span>endef<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>按OpenWrt的习惯，一般把自己设计的程序全部在src目录下。</p><ul><li><strong>Build/Compile</strong> 编译方法，没有特别说明的可以不予以定义。如果不定义将默认使用编译方法Build/Compile/Default。<br> 自行开发的软件包可以考虑使用下面的定义。</li></ul><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token keyword">define</span> Build/Compile    <span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span> -C <span class="token variable">$</span><span class="token punctuation">(</span>PKG_BUILD_DIR<span class="token punctuation">)</span> \    <span class="token variable">$</span><span class="token punctuation">(</span>TARGET_CONFIGURE_OPTS<span class="token punctuation">)</span> CFLAGS<span class="token operator">=</span><span class="token string">"$(TARGET_CFLAGS) -I $(LINUX_DIR)/include"</span><span class="token keyword">endef</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Package/$(PKG_NAME)/install</strong> 软件包的安装方法，包括一系列拷贝编译好的文件到指定位置。<strong>调用时会带一个参数，就是嵌入式系统的镜像文件系统目录</strong>，因此<strong>$(1)表示嵌入式系统的镜像目录</strong>。一般可以采用下面的方法：</li></ul><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token keyword">define</span> Package/<span class="token variable">$</span><span class="token punctuation">(</span>PKG_NAME<span class="token punctuation">)</span>/install    <span class="token variable">$</span><span class="token punctuation">(</span>INSTALL_DIR<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span>/usr/bin    <span class="token variable">$</span><span class="token punctuation">(</span>INSTALL_BIN<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>PKG_BUILD_DIR<span class="token punctuation">)</span>/<span class="token variable">$</span><span class="token punctuation">(</span>PKG_NAME<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span>/usr/bin/<span class="token keyword">endef</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>INSTALL_DIR、INSTALL_BIN在$(TOPDIR)/rules.mk文件定义，所以本Makefile必须引入$(TOPDIR)/rules.mk文件。<br> <strong>INSTALL_DIR:=install -d -m0755</strong> 意思是创建所属用户可读写和执行，其他用户可读可执行的目录。<br> <strong>INSTALL_BIN:=install -m0755</strong> 意思是编译好的文件存放到镜像文件目录。<br> 如果用户空间的应用软件在boot时要自动运行，则需要在安装方法说明中增加自动运行的脚本文件安装和配置文件安装方法。<br> 例如：</p><pre class="line-numbers language-makefile"><code class="language-makefile"><span class="token keyword">define</span> Package/mountd/install    <span class="token variable">$</span><span class="token punctuation">(</span>INSTALL_DIR<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span>/sbin/ <span class="token variable">$</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span>/etc/config/ <span class="token variable">$</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span>/etc/init.d/    <span class="token variable">$</span><span class="token punctuation">(</span>INSTALL_BIN<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>PKG_BUILD_DIR<span class="token punctuation">)</span>/mountd <span class="token variable">$</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span>/sbin/    <span class="token variable">$</span><span class="token punctuation">(</span>INSTALL_DATA<span class="token punctuation">)</span> ./files/mountd.config <span class="token variable">$</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span>/etc/config/mountd    <span class="token variable">$</span><span class="token punctuation">(</span>INSTALL_BIN<span class="token punctuation">)</span> ./files/mountd.init <span class="token variable">$</span><span class="token punctuation">(</span>1<span class="token punctuation">)</span>/etc/init.d/mountd<span class="token keyword">endef</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装文件放在files子目录下，不要与源代码文件目录src混在一起，以提高可读性。使用清晰的文件扩展名，更方便安装识别文件。</p><ul><li><strong>Package/$(PKG_NAME)/preinst</strong> 软件包安装前处理方法，使用脚本语言，因此定义的第一行需要下面的格式<br> <code>#!/bin/sh</code><br> 调用时带入的参数为嵌入式系统的镜像目录。</li><li><strong>Package/$(PKG_NAME)/postinst</strong> 软件包安装后处理方法，使用脚本语言。</li><li><strong>Package/$(PKG_NAME)/prerm</strong> 软件包删除前处理方法，使用脚本语言。</li><li><strong>Package/$(PKG_NAME)/postrm</strong> 软件包删除后处理方法，使用脚本语言。</li></ul><p><strong>注意：</strong>对于所有在pre/post, install/removal脚本中使用的变量，<strong>都应该使用”$$“代替”$“</strong>。这是告诉make暂时不要解析这个变量，而是把它当成普通字符串以及用”$“代替”$$“</p><h2 id="内核驱动模块包定义"><a href="#内核驱动模块包定义" class="headerlink" title="内核驱动模块包定义"></a>内核驱动模块包定义</h2><p>Linux分为内核空间和用户空间。开发者开发的内核部分可以直接加入Linux的Kernel程序，也可以生成内核模块以便需要时装入内核。OpenWrt一般希望开发者生成内核模块，在Linux启动后自动装载或手工使用insmod命令装载。内核模块使用KernelPackage开头，其他与一般应用软件包基本相同。<br> 在内核驱动模块定义中增加了：</p><ul><li><strong>SUBMENU</strong> 表示子菜单位置，在$(INCLUDE)/kernel.mk对内核模块定义了CATEGORY为kernel modules，所以内核模块在menuconfig中的主菜单为kernel modules，然后有下一级子菜单$(SUBMENU)。在子菜单下可以看到以kmod-$(PKG_NAME)项目。</li><li><strong>DEFAULT</strong> 表示直接编入内核或产生内核模块，y表示直接编入内核，m表示产生内核模块。</li><li><strong>AUTOLOAD</strong> 表示自动装入内核，一般表示方法为：<br> <code>AUTOLOAD:=$(call AutoLoad, $(PRIORITY),$(AUTOLOAD_MODS))</code><br> AutoLoad的第一个参数$(PRIORITY)为优先级，01为最优先，99为最后装载。有关自动装载可以在/etc/modules.d目录下看到，第二个参数$(AUTOLOAD_MODS)模块名，每个模块名以空格符分隔。即可同时装载多个内核模块。<br> 在开发过程最好不要使用自动装载，经过严格调试后再使用，可以减轻调试的工作量。</li></ul><h2 id="使用定义"><a href="#使用定义" class="headerlink" title="使用定义"></a>使用定义</h2><p>完成前面定义后，必须使用eval函数实现各种定义。其格式为：<br> 对于一般应用软件包<br> <code>$(eval $(call Package, $(PKG_NAME)))</code><br> 或对于内核驱动模块<br> <code>$(eval $(call KernelPackage, $(PKG_NAME)))</code><br> 如果一个软件包有多个程序，例如：一个应用程序有自己的内核驱动模块，上面使用PKG_NAME需要灵活变通。eval函数可以设计多个。也可以当成多个软件包处理。</p><h2 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h2><blockquote><p><a href="https://www.jianshu.com/p/21c8937ac7ea" target="_blank" rel="noopener">https://www.jianshu.com/p/21c8937ac7ea</a></p><p><a href="https://openwrt.org/zh-cn/doc/devel/packages" target="_blank" rel="noopener">https://openwrt.org/zh-cn/doc/devel/packages</a></p></blockquote><h1 id="开机自启动配置"><a href="#开机自启动配置" class="headerlink" title="开机自启动配置"></a>开机自启动配置</h1><ul><li><p>创建文件夹</p><pre class="line-numbers language-shell"><code class="language-shell">mkdir -p package/helloworld/filescd package/helloworld/filestouch helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>编写脚本<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200218113811.png" alt></p></li><li><p>修改helloworld 目录下的Makefile<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200218113854.png" alt></p></li></ul><h1 id="重复安装保留配置文件"><a href="#重复安装保留配置文件" class="headerlink" title="重复安装保留配置文件"></a>重复安装保留配置文件</h1><ul><li><p>问题<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200218114051.png" alt></p></li><li><p>解决方法<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200218114157.png" alt></p></li><li><p>引用</p><blockquote><p><a href="https://stackoverflow.com/questions/34512804/how-to-keep-config-after-reinstall-ipk-on-openwrt" target="_blank" rel="noopener">https://stackoverflow.com/questions/34512804/how-to-keep-config-after-reinstall-ipk-on-openwrt</a></p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;相关知识&quot;&gt;&lt;a href=&quot;#相关知识&quot; class=&quot;headerlink&quot; title=&quot;相关知识&quot;&gt;&lt;/a&gt;相关知识&lt;/h1&gt;&lt;p&gt;&lt;img
        
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://blog.littlekang.xyz/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="openwrt" scheme="http://blog.littlekang.xyz/tags/openwrt/"/>
    
  </entry>
  
  <entry>
    <title>Typoro PicGo MarkDown协同工作</title>
    <link href="http://blog.littlekang.xyz/article/32c0b2ae/"/>
    <id>http://blog.littlekang.xyz/article/32c0b2ae/</id>
    <published>2020-02-12T16:12:38.000Z</published>
    <updated>2020-02-16T15:59:00.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tyora简介"><a href="#Tyora简介" class="headerlink" title="Tyora简介"></a>Tyora简介</h1><ul><li><p>官网：<a href="https://typora.io/" target="_blank" rel="noopener">https://typora.io/</a></p></li><li><p>Typora 是一款简单、高效而且非常优雅的 Markdown 编辑器，它提供了一种所见即所得的全新的 Markdown 写作体验。</p><p>Typora 把源码编辑和效果预览两者合二为一，在输入 Markdown 代码的时候即时生成预览效果。</p><p>Typora 是目前互联网上最受欢迎的 Markdown 编辑器之一。</p></li><li><p>Tyora快捷键</p><ul><li>段落<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200213002205.png" alt></li><li>格式<br><img src="https://cdn.jsdelivr.net/gh/littlekang-code/kangimages/imgs/20200213002455.png" alt></li></ul></li></ul><h1 id="Pandoc文档格式转化"><a href="#Pandoc文档格式转化" class="headerlink" title="Pandoc文档格式转化"></a>Pandoc文档格式转化</h1><ul><li><p>官网 <a href="https://pandoc.org/" target="_blank" rel="noopener">https://pandoc.org/</a></p></li><li><p>简介：</p></li><li><p><em>Pandoc*</em>是一个标记语言转换工具，可实现不同标记语言间的格式转换，堪称该领域中的“瑞士军刀”。<br>Typora 的文件导入/导出功能使用 Pandoc 把 Markdown 源码转换成不同的文件格式，所以我们如果想使用文件导入/导出功能，必须先安装 Pandoc。<br>如果不安装 Pandoc，Typora 只支持导出 HTML 和 PDF 格式的文件。<br>如果安装了 Pandoc ：<br>Typora 支持的导入文件格式: .docx, .latex, .tex, .ltx, .rst, .rest, .org, .wiki, .dokuwiki, .textile, .opml, .epub.<br>Typora 支持的导出文件格式 : HTML, PDF, Docx, odt, rtf, Epub, LaTeX, Media Wiki,Image.</p></li><li><p>安装方式：<br>STEP 1. 打开下载页面：<a href="https://github.com/jgm/pandoc/releases/latest" target="_blank" rel="noopener">https://github.com/jgm/pandoc/releases/latest</a><br>STEP 2. 下载最新的安装包：pandoc-版本号.msi<br>STEP 3. 双击后按照提示一步步安装</p></li></ul><h1 id="PicGo图床"><a href="#PicGo图床" class="headerlink" title="PicGo图床"></a>PicGo图床</h1><ul><li><p>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/PicGo/releases</a></p></li><li><p>简介：<br>PicGo: 一个用于快速上传图片并获取图片URL链接的工具<br>PicGo 本体支持如下图床：</p><ul><li>微博图床 v1.0 微博图床从 2019 年 4 月开始进行防盗链，不建议继续使用</li><li>七牛图床 v1.0</li><li>腾讯云 COS v4\v5版本 v1.1 &amp; v1.5.0</li><li>又拍云 v1.2.0</li><li>GitHub v1.5.0</li><li>SM.MS v1.5.1 由于官方不再支持V1版本，暂时请使用smms-user插件</li><li>阿里云 OSS v1.6.0</li><li>Imgur v1.6.0</li></ul></li><li><p>特色功能</p><ul><li>支持拖拽图片上传</li><li>支持快捷键上传剪贴板里第一张图片</li><li>Windows和macOS支持右键图片文件通过菜单上传 (v2.1.0+)</li><li>上传图片后自动复制链接到剪贴板</li><li>支持自定义复制到剪贴板的链接格式</li><li>支持修改快捷键，默认快速上传快捷键：<code>command+shift+p</code>（macOS）| <code>control+shift+p</code>（Windows\Linux)</li><li>支持插件系统，已有插件支持Gitee、青云等第三方图床<ul><li>更多第三方插件以及使用了 PicGo 底层的应用可以在 <a href="https://github.com/PicGo/Awesome-PicGo" target="_blank" rel="noopener">Awesome-PicGo</a> 找到。欢迎贡献！</li></ul></li><li>支持通过发送HTTP请求调用 PicGo 上传（v2.2.0+)</li></ul></li></ul><h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><blockquote><p><a href="https://www.jianshu.com/p/45ff441ac0d6" target="_blank" rel="noopener">Typora：简单高效的 Markdown 编辑器</a><br><a href="https://www.jianshu.com/p/a0bf28d7f2fd" target="_blank" rel="noopener">Typora + PicGo MarkDown完美组合</a><br><a href="https://www.jianshu.com/p/44c8aaa9cda1" target="_blank" rel="noopener">Typora - 不要太棒的Markdown编辑器</a><br><a href="https://www.cnblogs.com/lc1203/p/ac5d44992d9c5f84bf3383d15aff40c2.html" target="_blank" rel="noopener">高效且优雅的笔记记录：为知笔记+Typora+图床</a><br><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">Picgo github readme</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;Tyora简介&quot;&gt;&lt;a href=&quot;#Tyora简介&quot; class=&quot;headerlink&quot; title=&quot;Tyora简介&quot;&gt;&lt;/a&gt;Tyora简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;官网：&lt;a href=&quot;https://typora.io/&quot;
        
      
    
    </summary>
    
      <category term="高效" scheme="http://blog.littlekang.xyz/categories/%E9%AB%98%E6%95%88/"/>
    
    
      <category term="tools" scheme="http://blog.littlekang.xyz/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>hexo cmd</title>
    <link href="http://blog.littlekang.xyz/article/339e02f9/"/>
    <id>http://blog.littlekang.xyz/article/339e02f9/</id>
    <published>2020-02-12T03:54:06.000Z</published>
    <updated>2020-02-16T15:59:00.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新建网站"><a href="#新建网站" class="headerlink" title="新建网站"></a>新建网站</h1><pre><code>hexo init [folder]</code></pre><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><h1 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h1><pre><code>hexo new [layout] &lt;title&gt;</code></pre><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><pre><code>hexo new &quot;post title with whitespace&quot;</code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--path</code></td><td align="left">自定义新文章的路径</td></tr><tr><td align="left"><code>-r</code>, <code>--replace</code></td><td align="left">如果存在同名文章，将其替换</td></tr><tr><td align="left"><code>-s</code>, <code>--slug</code></td><td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><pre><code>hexo new page --path about/me &quot;About me&quot;</code></pre><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><pre><code>hexo new page --path about/me</code></pre><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h1 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h1><pre><code>hexo g</code></pre><p>生成静态文件。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-d</code>, <code>--deploy</code></td><td align="left">文件生成后立即部署网站</td></tr><tr><td align="left"><code>-w</code>, <code>--watch</code></td><td align="left">监视文件变动</td></tr><tr><td align="left"><code>-b</code>, <code>--bail</code></td><td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td align="left"><code>-f</code>, <code>--force</code></td><td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td align="left"><code>-c</code>, <code>--concurrency</code></td><td align="left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><h1 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h1><pre><code>hexo s</code></pre><p>默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>-p</code>, <code>--port</code></td><td align="left">重设端口</td></tr><tr><td align="left"><code>-s</code>, <code>--static</code></td><td align="left">只使用静态文件</td></tr><tr><td align="left"><code>-l</code>, <code>--log</code></td><td align="left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><pre><code>hexo d</code></pre><h1 id="清除生成的静态页面"><a href="#清除生成的静态页面" class="headerlink" title="清除生成的静态页面"></a>清除生成的静态页面</h1><pre><code>hexo clean</code></pre><p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><p>引用地址：</p><p>从hexo.io说明文档拷贝</p><blockquote><p><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/commands.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;新建网站&quot;&gt;&lt;a href=&quot;#新建网站&quot; class=&quot;headerlink&quot; title=&quot;新建网站&quot;&gt;&lt;/a&gt;新建网站&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;hexo init [folder]&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;新建一个网站。如果没有设置
        
      
    
    </summary>
    
      <category term="测试" scheme="http://blog.littlekang.xyz/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="test" scheme="http://blog.littlekang.xyz/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>hello world</title>
    <link href="http://blog.littlekang.xyz/article/d4a1185/"/>
    <id>http://blog.littlekang.xyz/article/d4a1185/</id>
    <published>2020-02-10T09:13:04.000Z</published>
    <updated>2020-02-16T15:59:00.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>这是一个测试。<br><img src="https://s2.ax1x.com/2020/02/10/15r7oF.png" alt="15r7oF.png"></p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world !\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" target="_blank" rel="noopener">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;这是一个测试。&lt;br&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/10/15r7oF.png&quot;
        
      
    
    </summary>
    
      <category term="测试" scheme="http://blog.littlekang.xyz/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="test" scheme="http://blog.littlekang.xyz/tags/test/"/>
    
  </entry>
  
</feed>
